/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len(),
        );
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len(),
        );
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const DISPATCH_LEVEL: u32 = 2;
pub const APC_LEVEL: u32 = 1;
pub const PASSIVE_LEVEL: u32 = 0;
pub const HIGH_LEVEL: u32 = 15;
pub const OBJ_OPENIF: u32 = 128;
pub const OBJ_KERNEL_HANDLE: u32 = 512;
pub const OBJ_FORCE_ACCESS_CHECK: u32 = 1024;
pub const LOW_LEVEL: u32 = 0;
pub const CMCI_LEVEL: u32 = 5;
pub const CLOCK_LEVEL: u32 = 13;
pub const IPI_LEVEL: u32 = 14;
pub const DRS_LEVEL: u32 = 14;
pub const POWER_LEVEL: u32 = 14;
pub const PROFILE_LEVEL: u32 = 15;
pub const SE_LOAD_DRIVER_PRIVILEGE: u32 = 10;
pub const FILE_DEVICE_BEEP: u32 = 1;
pub const FILE_DEVICE_CD_ROM: u32 = 2;
pub const FILE_DEVICE_CD_ROM_FILE_SYSTEM: u32 = 3;
pub const FILE_DEVICE_CONTROLLER: u32 = 4;
pub const FILE_DEVICE_DATALINK: u32 = 5;
pub const FILE_DEVICE_DFS: u32 = 6;
pub const FILE_DEVICE_DISK: u32 = 7;
pub const FILE_DEVICE_DISK_FILE_SYSTEM: u32 = 8;
pub const FILE_DEVICE_FILE_SYSTEM: u32 = 9;
pub const FILE_DEVICE_INPORT_PORT: u32 = 10;
pub const FILE_DEVICE_KEYBOARD: u32 = 11;
pub const FILE_DEVICE_MAILSLOT: u32 = 12;
pub const FILE_DEVICE_MIDI_IN: u32 = 13;
pub const FILE_DEVICE_MIDI_OUT: u32 = 14;
pub const FILE_DEVICE_MOUSE: u32 = 15;
pub const FILE_DEVICE_MULTI_UNC_PROVIDER: u32 = 16;
pub const FILE_DEVICE_NAMED_PIPE: u32 = 17;
pub const FILE_DEVICE_NETWORK: u32 = 18;
pub const FILE_DEVICE_NETWORK_BROWSER: u32 = 19;
pub const FILE_DEVICE_NETWORK_FILE_SYSTEM: u32 = 20;
pub const FILE_DEVICE_NULL: u32 = 21;
pub const FILE_DEVICE_PARALLEL_PORT: u32 = 22;
pub const FILE_DEVICE_PHYSICAL_NETCARD: u32 = 23;
pub const FILE_DEVICE_PRINTER: u32 = 24;
pub const FILE_DEVICE_SCANNER: u32 = 25;
pub const FILE_DEVICE_SERIAL_MOUSE_PORT: u32 = 26;
pub const FILE_DEVICE_SERIAL_PORT: u32 = 27;
pub const FILE_DEVICE_SCREEN: u32 = 28;
pub const FILE_DEVICE_SOUND: u32 = 29;
pub const FILE_DEVICE_STREAMS: u32 = 30;
pub const FILE_DEVICE_TAPE: u32 = 31;
pub const FILE_DEVICE_TAPE_FILE_SYSTEM: u32 = 32;
pub const FILE_DEVICE_TRANSPORT: u32 = 33;
pub const FILE_DEVICE_UNKNOWN: u32 = 34;
pub const FILE_DEVICE_VIDEO: u32 = 35;
pub const FILE_DEVICE_VIRTUAL_DISK: u32 = 36;
pub const FILE_DEVICE_WAVE_IN: u32 = 37;
pub const FILE_DEVICE_WAVE_OUT: u32 = 38;
pub const FILE_DEVICE_8042_PORT: u32 = 39;
pub const FILE_DEVICE_NETWORK_REDIRECTOR: u32 = 40;
pub const FILE_DEVICE_BATTERY: u32 = 41;
pub const FILE_DEVICE_BUS_EXTENDER: u32 = 42;
pub const FILE_DEVICE_MODEM: u32 = 43;
pub const FILE_DEVICE_VDM: u32 = 44;
pub const FILE_DEVICE_MASS_STORAGE: u32 = 45;
pub const FILE_DEVICE_SMB: u32 = 46;
pub const FILE_DEVICE_KS: u32 = 47;
pub const FILE_DEVICE_CHANGER: u32 = 48;
pub const FILE_DEVICE_SMARTCARD: u32 = 49;
pub const FILE_DEVICE_ACPI: u32 = 50;
pub const FILE_DEVICE_DVD: u32 = 51;
pub const FILE_DEVICE_FULLSCREEN_VIDEO: u32 = 52;
pub const FILE_DEVICE_DFS_FILE_SYSTEM: u32 = 53;
pub const FILE_DEVICE_DFS_VOLUME: u32 = 54;
pub const FILE_DEVICE_SERENUM: u32 = 55;
pub const FILE_DEVICE_TERMSRV: u32 = 56;
pub const FILE_DEVICE_KSEC: u32 = 57;
pub const FILE_DEVICE_FIPS: u32 = 58;
pub const FILE_DEVICE_INFINIBAND: u32 = 59;
pub const FILE_DEVICE_VMBUS: u32 = 62;
pub const FILE_DEVICE_CRYPT_PROVIDER: u32 = 63;
pub const FILE_DEVICE_WPD: u32 = 64;
pub const FILE_DEVICE_BLUETOOTH: u32 = 65;
pub const FILE_DEVICE_MT_COMPOSITE: u32 = 66;
pub const FILE_DEVICE_MT_TRANSPORT: u32 = 67;
pub const FILE_DEVICE_BIOMETRIC: u32 = 68;
pub const FILE_DEVICE_PMI: u32 = 69;
pub const FILE_DEVICE_EHSTOR: u32 = 70;
pub const FILE_DEVICE_DEVAPI: u32 = 71;
pub const FILE_DEVICE_GPIO: u32 = 72;
pub const FILE_DEVICE_USBEX: u32 = 73;
pub const FILE_DEVICE_CONSOLE: u32 = 80;
pub const FILE_DEVICE_NFP: u32 = 81;
pub const FILE_DEVICE_SYSENV: u32 = 82;
pub const FILE_DEVICE_VIRTUAL_BLOCK: u32 = 83;
pub const FILE_DEVICE_POINT_OF_SERVICE: u32 = 84;
pub const FILE_DEVICE_STORAGE_REPLICATION: u32 = 85;
pub const FILE_DEVICE_TRUST_ENV: u32 = 86;
pub const FILE_DEVICE_UCM: u32 = 87;
pub const FILE_DEVICE_UCMTCPCI: u32 = 88;
pub const FILE_DEVICE_PERSISTENT_MEMORY: u32 = 89;
pub const FILE_DEVICE_NVDIMM: u32 = 90;
pub const FILE_DEVICE_HOLOGRAPHIC: u32 = 91;
pub const FILE_DEVICE_SDFXHCI: u32 = 92;
pub const FILE_DEVICE_UCMUCSI: u32 = 93;
pub const FILE_DEVICE_PRM: u32 = 94;
pub const FILE_DEVICE_EVENT_COLLECTOR: u32 = 95;
pub const FILE_DEVICE_USB4: u32 = 96;
pub const FILE_DEVICE_SOUNDWIRE: u32 = 97;
pub const FILE_DEVICE_FABRIC_NVME: u32 = 98;
pub const FILE_DEVICE_SVM: u32 = 99;
pub const FILE_DEVICE_HARDWARE_ACCELERATOR: u32 = 100;
pub const FILE_DEVICE_I3C: u32 = 101;
pub const METHOD_BUFFERED: u32 = 0;
pub const METHOD_IN_DIRECT: u32 = 1;
pub const METHOD_OUT_DIRECT: u32 = 2;
pub const METHOD_NEITHER: u32 = 3;
pub const METHOD_DIRECT_TO_HARDWARE: u32 = 1;
pub const METHOD_DIRECT_FROM_HARDWARE: u32 = 2;
pub const FILE_ANY_ACCESS: u32 = 0;
pub const FILE_SPECIAL_ACCESS: u32 = 0;
pub const FILE_READ_ACCESS: u32 = 1;
pub const FILE_WRITE_ACCESS: u32 = 2;
pub const FILE_READ_DATA: u32 = 1;
pub const FILE_LIST_DIRECTORY: u32 = 1;
pub const FILE_WRITE_DATA: u32 = 2;
pub const FILE_ADD_FILE: u32 = 2;
pub const FILE_APPEND_DATA: u32 = 4;
pub const FILE_ADD_SUBDIRECTORY: u32 = 4;
pub const FILE_CREATE_PIPE_INSTANCE: u32 = 4;
pub const FILE_READ_EA: u32 = 8;
pub const FILE_WRITE_EA: u32 = 16;
pub const FILE_EXECUTE: u32 = 32;
pub const FILE_TRAVERSE: u32 = 32;
pub const FILE_DELETE_CHILD: u32 = 64;
pub const FILE_READ_ATTRIBUTES: u32 = 128;
pub const FILE_WRITE_ATTRIBUTES: u32 = 256;
pub const FILE_ALL_ACCESS: u32 = 2032127;
pub const FILE_GENERIC_READ: u32 = 1179785;
pub const FILE_GENERIC_WRITE: u32 = 1179926;
pub const FILE_GENERIC_EXECUTE: u32 = 1179808;
pub const FILE_SHARE_READ: u32 = 1;
pub const FILE_SHARE_WRITE: u32 = 2;
pub const FILE_SHARE_DELETE: u32 = 4;
pub const FILE_SHARE_VALID_FLAGS: u32 = 7;
pub const FILE_ATTRIBUTE_READONLY: u32 = 1;
pub const FILE_ATTRIBUTE_HIDDEN: u32 = 2;
pub const FILE_ATTRIBUTE_SYSTEM: u32 = 4;
pub const FILE_ATTRIBUTE_DIRECTORY: u32 = 16;
pub const FILE_ATTRIBUTE_ARCHIVE: u32 = 32;
pub const FILE_ATTRIBUTE_DEVICE: u32 = 64;
pub const FILE_ATTRIBUTE_NORMAL: u32 = 128;
pub const FILE_ATTRIBUTE_TEMPORARY: u32 = 256;
pub const FILE_ATTRIBUTE_SPARSE_FILE: u32 = 512;
pub const FILE_ATTRIBUTE_REPARSE_POINT: u32 = 1024;
pub const FILE_ATTRIBUTE_COMPRESSED: u32 = 2048;
pub const FILE_ATTRIBUTE_OFFLINE: u32 = 4096;
pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: u32 = 8192;
pub const FILE_ATTRIBUTE_ENCRYPTED: u32 = 16384;
pub const FILE_ATTRIBUTE_INTEGRITY_STREAM: u32 = 32768;
pub const FILE_ATTRIBUTE_VIRTUAL: u32 = 65536;
pub const FILE_ATTRIBUTE_NO_SCRUB_DATA: u32 = 131072;
pub const FILE_ATTRIBUTE_EA: u32 = 262144;
pub const FILE_ATTRIBUTE_PINNED: u32 = 524288;
pub const FILE_ATTRIBUTE_UNPINNED: u32 = 1048576;
pub const FILE_ATTRIBUTE_RECALL_ON_OPEN: u32 = 262144;
pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS: u32 = 4194304;
pub const FILE_ATTRIBUTE_VALID_FLAGS: u32 = 196535;
pub const FILE_ATTRIBUTE_VALID_SET_FLAGS: u32 = 143783;
pub const FILE_SUPERSEDE: u32 = 0;
pub const FILE_OPEN: u32 = 1;
pub const FILE_CREATE: u32 = 2;
pub const FILE_OPEN_IF: u32 = 3;
pub const FILE_OVERWRITE: u32 = 4;
pub const FILE_OVERWRITE_IF: u32 = 5;
pub const FILE_MAXIMUM_DISPOSITION: u32 = 5;
pub const FILE_DIRECTORY_FILE: u32 = 1;
pub const FILE_WRITE_THROUGH: u32 = 2;
pub const FILE_SEQUENTIAL_ONLY: u32 = 4;
pub const FILE_NO_INTERMEDIATE_BUFFERING: u32 = 8;
pub const FILE_SYNCHRONOUS_IO_ALERT: u32 = 16;
pub const FILE_SYNCHRONOUS_IO_NONALERT: u32 = 32;
pub const FILE_NON_DIRECTORY_FILE: u32 = 64;
pub const FILE_CREATE_TREE_CONNECTION: u32 = 128;
pub const FILE_COMPLETE_IF_OPLOCKED: u32 = 256;
pub const FILE_NO_EA_KNOWLEDGE: u32 = 512;
pub const FILE_OPEN_REMOTE_INSTANCE: u32 = 1024;
pub const FILE_RANDOM_ACCESS: u32 = 2048;
pub const FILE_DELETE_ON_CLOSE: u32 = 4096;
pub const FILE_OPEN_BY_FILE_ID: u32 = 8192;
pub const FILE_OPEN_FOR_BACKUP_INTENT: u32 = 16384;
pub const FILE_NO_COMPRESSION: u32 = 32768;
pub const FILE_OPEN_REQUIRING_OPLOCK: u32 = 65536;
pub const FILE_DISALLOW_EXCLUSIVE: u32 = 131072;
pub const FILE_SESSION_AWARE: u32 = 262144;
pub const FILE_RESERVE_OPFILTER: u32 = 1048576;
pub const FILE_OPEN_REPARSE_POINT: u32 = 2097152;
pub const FILE_OPEN_NO_RECALL: u32 = 4194304;
pub const FILE_OPEN_FOR_FREE_SPACE_QUERY: u32 = 8388608;
pub const FILE_VALID_OPTION_FLAGS: u32 = 16777215;
pub const FILE_VALID_PIPE_OPTION_FLAGS: u32 = 50;
pub const FILE_VALID_MAILSLOT_OPTION_FLAGS: u32 = 50;
pub const FILE_VALID_SET_FLAGS: u32 = 54;
pub const FILE_SUPERSEDED: u32 = 0;
pub const FILE_OPENED: u32 = 1;
pub const FILE_CREATED: u32 = 2;
pub const FILE_OVERWRITTEN: u32 = 3;
pub const FILE_EXISTS: u32 = 4;
pub const FILE_DOES_NOT_EXIST: u32 = 5;
pub const FILE_WRITE_TO_END_OF_FILE: u32 = 4294967295;
pub const FILE_USE_FILE_POINTER_POSITION: u32 = 4294967294;
pub const FILE_BYTE_ALIGNMENT: u32 = 0;
pub const FILE_WORD_ALIGNMENT: u32 = 1;
pub const FILE_LONG_ALIGNMENT: u32 = 3;
pub const FILE_QUAD_ALIGNMENT: u32 = 7;
pub const FILE_OCTA_ALIGNMENT: u32 = 15;
pub const FILE_32_BYTE_ALIGNMENT: u32 = 31;
pub const FILE_64_BYTE_ALIGNMENT: u32 = 63;
pub const FILE_128_BYTE_ALIGNMENT: u32 = 127;
pub const FILE_256_BYTE_ALIGNMENT: u32 = 255;
pub const FILE_512_BYTE_ALIGNMENT: u32 = 511;
pub const FILE_REMOVABLE_MEDIA: u32 = 1;
pub const FILE_READ_ONLY_DEVICE: u32 = 2;
pub const FILE_FLOPPY_DISKETTE: u32 = 4;
pub const FILE_WRITE_ONCE_MEDIA: u32 = 8;
pub const FILE_REMOTE_DEVICE: u32 = 16;
pub const FILE_DEVICE_IS_MOUNTED: u32 = 32;
pub const FILE_VIRTUAL_VOLUME: u32 = 64;
pub const FILE_AUTOGENERATED_DEVICE_NAME: u32 = 128;
pub const FILE_DEVICE_SECURE_OPEN: u32 = 256;
pub const FILE_CHARACTERISTIC_PNP_DEVICE: u32 = 2048;
pub const FILE_CHARACTERISTIC_TS_DEVICE: u32 = 4096;
pub const FILE_CHARACTERISTIC_WEBDAV_DEVICE: u32 = 8192;
pub const FILE_CHARACTERISTIC_CSV: u32 = 65536;
pub const FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL: u32 = 131072;
pub const FILE_PORTABLE_DEVICE: u32 = 262144;
pub const FILE_REMOTE_DEVICE_VSMB: u32 = 524288;
pub const FILE_DEVICE_REQUIRE_SECURITY_CHECK: u32 = 1048576;
pub const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS: u32 = 1;
pub const FILE_SKIP_SET_EVENT_ON_HANDLE: u32 = 2;
pub const FILE_SKIP_SET_USER_EVENT_ON_FAST_IO: u32 = 4;
pub const PAGE_READONLY: u32 = 2;
pub const PAGE_READWRITE: u32 = 4;
pub const PAGE_EXECUTE: u32 = 16;
pub const PAGE_EXECUTE_READ: u32 = 32;
pub const PAGE_EXECUTE_READWRITE: u32 = 64;
pub const PAGE_NOCACHE: u32 = 512;
pub const PAGE_WRITECOMBINE: u32 = 1024;
pub const DPFLTR_ERROR_LEVEL: u32 = 0;
pub const DPFLTR_WARNING_LEVEL: u32 = 1;
pub const DPFLTR_TRACE_LEVEL: u32 = 2;
pub const DPFLTR_INFO_LEVEL: u32 = 3;
pub const DPFLTR_MASK: u32 = 2147483648;
pub const FILE_ATTRIBUTE_DEDICATED: u32 = 256;
pub const FILE_CHARACTERISTICS_EXPECT_ORDERLY_REMOVAL_EX: u32 = 16384;
pub const FILE_CHARACTERISTICS_EXPECT_SURPRISE_REMOVAL_EX: u32 = 32768;
pub const FILE_CHARACTERISTICS_REMOVAL_POLICY_MASK_EX: u32 = 49152;
pub const FILE_CHARACTERISTICS_EXPECT_ORDERLY_REMOVAL_DEPRECATED: u32 = 512;
pub const FILE_CHARACTERISTICS_EXPECT_SURPRISE_REMOVAL_DEPRECATED: u32 = 768;
pub const FILE_CHARACTERISTICS_REMOVAL_POLICY_MASK_DEPRECATED: u32 = 768;
pub const FILE_CHARACTERISTICS_PROPAGATED: u32 = 327951;
pub const FILE_DISPOSITION_DO_NOT_DELETE: u32 = 0;
pub const FILE_DISPOSITION_DELETE: u32 = 1;
pub const FILE_DISPOSITION_POSIX_SEMANTICS: u32 = 2;
pub const FILE_DISPOSITION_FORCE_IMAGE_SECTION_CHECK: u32 = 4;
pub const FILE_DISPOSITION_ON_CLOSE: u32 = 8;
pub const FILE_OPLOCK_BROKEN_TO_LEVEL_2: u32 = 7;
pub const FILE_OPLOCK_BROKEN_TO_NONE: u32 = 8;
pub const FILE_OPBATCH_BREAK_UNDERWAY: u32 = 9;
pub const FILE_NOTIFY_CHANGE_FILE_NAME: u32 = 1;
pub const FILE_NOTIFY_CHANGE_DIR_NAME: u32 = 2;
pub const FILE_NOTIFY_CHANGE_NAME: u32 = 3;
pub const FILE_NOTIFY_CHANGE_ATTRIBUTES: u32 = 4;
pub const FILE_NOTIFY_CHANGE_SIZE: u32 = 8;
pub const FILE_NOTIFY_CHANGE_LAST_WRITE: u32 = 16;
pub const FILE_NOTIFY_CHANGE_LAST_ACCESS: u32 = 32;
pub const FILE_NOTIFY_CHANGE_CREATION: u32 = 64;
pub const FILE_NOTIFY_CHANGE_EA: u32 = 128;
pub const FILE_NOTIFY_CHANGE_SECURITY: u32 = 256;
pub const FILE_NOTIFY_CHANGE_STREAM_NAME: u32 = 512;
pub const FILE_NOTIFY_CHANGE_STREAM_SIZE: u32 = 1024;
pub const FILE_NOTIFY_CHANGE_STREAM_WRITE: u32 = 2048;
pub const FILE_NOTIFY_VALID_MASK: u32 = 4095;
pub const FILE_ACTION_ADDED: u32 = 1;
pub const FILE_ACTION_REMOVED: u32 = 2;
pub const FILE_ACTION_MODIFIED: u32 = 3;
pub const FILE_ACTION_RENAMED_OLD_NAME: u32 = 4;
pub const FILE_ACTION_RENAMED_NEW_NAME: u32 = 5;
pub const FILE_ACTION_ADDED_STREAM: u32 = 6;
pub const FILE_ACTION_REMOVED_STREAM: u32 = 7;
pub const FILE_ACTION_MODIFIED_STREAM: u32 = 8;
pub const FILE_ACTION_REMOVED_BY_DELETE: u32 = 9;
pub const FILE_ACTION_ID_NOT_TUNNELLED: u32 = 10;
pub const FILE_ACTION_TUNNELLED_ID_COLLISION: u32 = 11;
pub const FILE_PIPE_BYTE_STREAM_TYPE: u32 = 0;
pub const FILE_PIPE_MESSAGE_TYPE: u32 = 1;
pub const FILE_PIPE_ACCEPT_REMOTE_CLIENTS: u32 = 0;
pub const FILE_PIPE_REJECT_REMOTE_CLIENTS: u32 = 2;
pub const FILE_PIPE_TYPE_VALID_MASK: u32 = 3;
pub const FILE_PIPE_QUEUE_OPERATION: u32 = 0;
pub const FILE_PIPE_COMPLETE_OPERATION: u32 = 1;
pub const FILE_PIPE_BYTE_STREAM_MODE: u32 = 0;
pub const FILE_PIPE_MESSAGE_MODE: u32 = 1;
pub const FILE_PIPE_INBOUND: u32 = 0;
pub const FILE_PIPE_OUTBOUND: u32 = 1;
pub const FILE_PIPE_FULL_DUPLEX: u32 = 2;
pub const FILE_PIPE_DISCONNECTED_STATE: u32 = 1;
pub const FILE_PIPE_LISTENING_STATE: u32 = 2;
pub const FILE_PIPE_CONNECTED_STATE: u32 = 3;
pub const FILE_PIPE_CLOSING_STATE: u32 = 4;
pub const FILE_PIPE_CLIENT_END: u32 = 0;
pub const FILE_PIPE_SERVER_END: u32 = 1;
pub const FILE_CASE_SENSITIVE_SEARCH: u32 = 1;
pub const FILE_CASE_PRESERVED_NAMES: u32 = 2;
pub const FILE_UNICODE_ON_DISK: u32 = 4;
pub const FILE_PERSISTENT_ACLS: u32 = 8;
pub const FILE_FILE_COMPRESSION: u32 = 16;
pub const FILE_VOLUME_QUOTAS: u32 = 32;
pub const FILE_SUPPORTS_SPARSE_FILES: u32 = 64;
pub const FILE_SUPPORTS_REPARSE_POINTS: u32 = 128;
pub const FILE_SUPPORTS_REMOTE_STORAGE: u32 = 256;
pub const FILE_RETURNS_CLEANUP_RESULT_INFO: u32 = 512;
pub const FILE_SUPPORTS_POSIX_UNLINK_RENAME: u32 = 1024;
pub const FILE_SUPPORTS_BYPASS_IO: u32 = 2048;
pub const FILE_SUPPORTS_STREAM_SNAPSHOTS: u32 = 4096;
pub const FILE_SUPPORTS_CASE_SENSITIVE_DIRS: u32 = 8192;
pub const FILE_VOLUME_IS_COMPRESSED: u32 = 32768;
pub const FILE_SUPPORTS_OBJECT_IDS: u32 = 65536;
pub const FILE_SUPPORTS_ENCRYPTION: u32 = 131072;
pub const FILE_NAMED_STREAMS: u32 = 262144;
pub const FILE_READ_ONLY_VOLUME: u32 = 524288;
pub const FILE_SEQUENTIAL_WRITE_ONCE: u32 = 1048576;
pub const FILE_SUPPORTS_TRANSACTIONS: u32 = 2097152;
pub const FILE_SUPPORTS_HARD_LINKS: u32 = 4194304;
pub const FILE_SUPPORTS_EXTENDED_ATTRIBUTES: u32 = 8388608;
pub const FILE_SUPPORTS_OPEN_BY_FILE_ID: u32 = 16777216;
pub const FILE_SUPPORTS_USN_JOURNAL: u32 = 33554432;
pub const FILE_SUPPORTS_INTEGRITY_STREAMS: u32 = 67108864;
pub const FILE_SUPPORTS_BLOCK_REFCOUNTING: u32 = 134217728;
pub const FILE_SUPPORTS_SPARSE_VDL: u32 = 268435456;
pub const FILE_DAX_VOLUME: u32 = 536870912;
pub const FILE_SUPPORTS_GHOSTING: u32 = 1073741824;
pub const FILE_NEED_EA: u32 = 128;
pub const FILE_EA_TYPE_BINARY: u32 = 65534;
pub const FILE_EA_TYPE_ASCII: u32 = 65533;
pub const FILE_EA_TYPE_BITMAP: u32 = 65531;
pub const FILE_EA_TYPE_METAFILE: u32 = 65530;
pub const FILE_EA_TYPE_ICON: u32 = 65529;
pub const FILE_EA_TYPE_EA: u32 = 65518;
pub const FILE_EA_TYPE_MVMT: u32 = 65503;
pub const FILE_EA_TYPE_MVST: u32 = 65502;
pub const FILE_EA_TYPE_ASN1: u32 = 65501;
pub const FILE_EA_TYPE_FAMILY_IDS: u32 = 65281;
pub const FILE_NAME_FLAG_HARDLINK: u32 = 0;
pub const FILE_NAME_FLAG_NTFS: u32 = 1;
pub const FILE_NAME_FLAG_DOS: u32 = 2;
pub const FILE_NAME_FLAG_BOTH: u32 = 3;
pub const FILE_NAME_FLAGS_UNSPECIFIED: u32 = 128;
pub const FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_WRITELOCKED: u32 = 1;
pub const FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_VISIBLE_TO_TX: u32 = 2;
pub const FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_VISIBLE_OUTSIDE_TX: u32 = 4;
pub const FILE_CS_FLAG_CASE_SENSITIVE_DIR: u32 = 1;
pub const FILE_VC_QUOTA_NONE: u32 = 0;
pub const FILE_VC_QUOTA_TRACK: u32 = 1;
pub const FILE_VC_QUOTA_ENFORCE: u32 = 2;
pub const FILE_VC_QUOTA_MASK: u32 = 3;
pub const FILE_VC_CONTENT_INDEX_DISABLED: u32 = 8;
pub const FILE_VC_LOG_QUOTA_THRESHOLD: u32 = 16;
pub const FILE_VC_LOG_QUOTA_LIMIT: u32 = 32;
pub const FILE_VC_LOG_VOLUME_THRESHOLD: u32 = 64;
pub const FILE_VC_LOG_VOLUME_LIMIT: u32 = 128;
pub const FILE_VC_QUOTAS_INCOMPLETE: u32 = 256;
pub const FILE_VC_QUOTAS_REBUILDING: u32 = 512;
pub const FILE_VC_VALID_MASK: u32 = 1023;
pub const FILE_PREFETCH_TYPE_FOR_CREATE: u32 = 1;
pub const FILE_PREFETCH_TYPE_FOR_DIRENUM: u32 = 2;
pub const FILE_PREFETCH_TYPE_FOR_CREATE_EX: u32 = 3;
pub const FILE_PREFETCH_TYPE_FOR_DIRENUM_EX: u32 = 4;
pub const FILE_PREFETCH_TYPE_MAX: u32 = 4;
pub const FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA: u32 = 1;
pub const FILE_SET_ENCRYPTION: u32 = 1;
pub const FILE_CLEAR_ENCRYPTION: u32 = 2;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE: u32 = 1;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED: u32 = 2;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST: u32 = 4;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD: u32 = 8;
pub const FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE: u32 = 16;
pub const FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED: u32 = 32;
pub const FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR: u32 = 64;
pub const FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED: u32 = 128;
pub const FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED: u32 = 256;
pub const FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED: u32 = 512;
pub const FILE_INITIATE_REPAIR_HINT1_REPAIRED: u32 = 1024;
pub const FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG: u32 = 2048;
pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND: u32 = 4096;
pub const FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK: u32 = 8192;
pub const FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION: u32 = 16384;
pub const FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE: u32 = 32768;
pub const FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST: u32 = 65536;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH: u32 = 131072;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN: u32 = 262144;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD: u32 = 524288;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT: u32 = 1048576;
pub const FILE_INITIATE_REPAIR_HINT1_SID_VALID: u32 = 2097152;
pub const FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH: u32 = 4194304;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT: u32 = 8388608;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE: u32 = 16777216;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED: u32 = 33554432;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST: u32 = 67108864;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD: u32 = 134217728;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX: u32 = 268435456;
pub const FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY: u32 = 536870912;
pub const FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES: u32 = 1073741824;
pub const FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE: u32 = 2147483648;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_LCN: u64 = 4294967296;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_VCN: u64 = 8589934592;
pub const FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT: u64 = 17179869184;
pub const FILE_INITIATE_REPAIR_HINT1_ORPHAN: u64 = 34359738368;
pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL: u64 = 68719476736;
pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT: u64 = 137438953472;
pub const FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG: u64 = 274877906944;
pub const FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID: u64 = 549755813888;
pub const FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH: u64 = 1099511627776;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME: u64 = 2199023255552;
pub const FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES: u64 = 4398046511104;
pub const FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN: u32 = 1;
pub const FILE_TYPE_NOTIFICATION_FLAG_USAGE_END: u32 = 2;
pub const FILE_LAYOUT_NAME_ENTRY_PRIMARY: u32 = 1;
pub const FILE_LAYOUT_NAME_ENTRY_DOS: u32 = 2;
pub const FILE_REGION_USAGE_VALID_CACHED_DATA: u32 = 1;
pub const FILE_REGION_USAGE_VALID_NONCACHED_DATA: u32 = 2;
pub const FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT: u32 = 4;
pub const FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT: u32 = 8;
pub const FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT: u32 = 16;
pub const FILE_REGION_USAGE_QUERY_ALIGNMENT: u32 = 24;
pub const FILE_STORAGE_TIER_NAME_LENGTH: u32 = 256;
pub const FILE_STORAGE_TIER_DESCRIPTION_LENGTH: u32 = 512;
pub const FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY: u32 = 131072;
pub const FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE: u32 = 2097152;
pub const FILE_STORAGE_TIER_FLAG_READ_CACHE: u32 = 4194304;
pub const FILE_STORAGE_TIER_FLAG_PARITY: u32 = 8388608;
pub const FILE_STORAGE_TIER_FLAG_SMR: u32 = 16777216;
pub const FILE_PROVIDER_CURRENT_VERSION: u32 = 1;
pub const FILE_PROVIDER_SINGLE_FILE: u32 = 1;
pub const FILE_PROVIDER_COMPRESSION_XPRESS4K: u32 = 0;
pub const FILE_PROVIDER_COMPRESSION_LZX: u32 = 1;
pub const FILE_PROVIDER_COMPRESSION_XPRESS8K: u32 = 2;
pub const FILE_PROVIDER_COMPRESSION_XPRESS16K: u32 = 3;
pub const FILE_PROVIDER_COMPRESSION_MAXIMUM: u32 = 4;
pub const FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE: u32 = 1;
pub const FILE_PIPE_READ_DATA: u32 = 0;
pub const FILE_PIPE_WRITE_SPACE: u32 = 1;
pub const FILE_PIPE_COMPUTER_NAME_LENGTH: u32 = 15;
pub const FILE_PIPE_SYMLINK_FLAG_GLOBAL: u32 = 1;
pub const FILE_PIPE_SYMLINK_FLAG_RELATIVE: u32 = 2;
pub const FILE_PIPE_SYMLINK_VALID_FLAGS: u32 = 3;
pub type wchar_t = ::libc::c_ushort;
pub type LONG_PTR = ::libc::c_longlong;
pub type ULONG_PTR = ::libc::c_ulonglong;
pub type SIZE_T = ULONG_PTR;
pub type LONG64 = ::libc::c_longlong;
pub type KAFFINITY = ULONG_PTR;
pub type PVOID = *mut ::libc::c_void;
pub type CHAR = ::libc::c_char;
pub type SHORT = ::libc::c_short;
pub type LONG = ::libc::c_long;
pub type WCHAR = wchar_t;
pub type PWCH = *mut WCHAR;
pub type PCHAR = *mut CHAR;
pub type LPCSTR = *const CHAR;
pub type PCSTR = *const CHAR;
pub type UCHAR = ::libc::c_uchar;
pub type USHORT = ::libc::c_ushort;
pub type ULONG = ::libc::c_ulong;
pub type HANDLE = *mut ::libc::c_void;
pub type CCHAR = ::libc::c_char;
pub type CSHORT = ::libc::c_short;
pub type LCID = ULONG;
pub type NTSTATUS = LONG;
pub type LONGLONG = ::libc::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LARGE_INTEGER {
    pub __bindgen_anon_1: _LARGE_INTEGER__bindgen_ty_1,
    pub u: _LARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: LONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: ULONG,
    pub HighPart: LONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: ULONG,
    pub HighPart: LONG,
}
pub type LARGE_INTEGER = _LARGE_INTEGER;
pub type PLARGE_INTEGER = *mut LARGE_INTEGER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LUID {
    pub LowPart: ULONG,
    pub HighPart: LONG,
}
pub type LUID = _LUID;
pub type PHYSICAL_ADDRESS = LARGE_INTEGER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNICODE_STRING {
    pub Length: USHORT,
    pub MaximumLength: USHORT,
    pub Buffer: PWCH,
}
pub type UNICODE_STRING = _UNICODE_STRING;
pub type PUNICODE_STRING = *mut UNICODE_STRING;
pub type PCUNICODE_STRING = *const UNICODE_STRING;
pub type BOOLEAN = UCHAR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LIST_ENTRY {
    pub Flink: *mut _LIST_ENTRY,
    pub Blink: *mut _LIST_ENTRY,
}
pub type LIST_ENTRY = _LIST_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SINGLE_LIST_ENTRY {
    pub Next: *mut _SINGLE_LIST_ENTRY,
}
pub type SINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OBJECT_ATTRIBUTES {
    pub Length: ULONG,
    pub RootDirectory: HANDLE,
    pub ObjectName: PUNICODE_STRING,
    pub Attributes: ULONG,
    pub SecurityDescriptor: PVOID,
    pub SecurityQualityOfService: PVOID,
}
pub type OBJECT_ATTRIBUTES = _OBJECT_ATTRIBUTES;
pub type POBJECT_ATTRIBUTES = *mut OBJECT_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::libc::c_ulong,
    pub Data2: ::libc::c_ushort,
    pub Data3: ::libc::c_ushort,
    pub Data4: [::libc::c_uchar; 8usize],
}
pub type GUID = _GUID;
pub type KIRQL = UCHAR;
pub type PACCESS_STATE = *mut _ACCESS_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KPROCESS {
    _unused: [u8; 0],
}
pub type PEPROCESS = *mut _KPROCESS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KTHREAD {
    _unused: [u8; 0],
}
pub type PETHREAD = *mut _KTHREAD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_TIMER {
    _unused: [u8; 0],
}
pub type PIO_TIMER = *mut _IO_TIMER;
pub type PSECURITY_QUALITY_OF_SERVICE = *mut _SECURITY_QUALITY_OF_SERVICE;
pub type PVPB = *mut _VPB;
pub type PFILE_GET_QUOTA_INFORMATION = *mut _FILE_GET_QUOTA_INFORMATION;
pub type KSPIN_LOCK = ULONG_PTR;
pub type PACCESS_TOKEN = PVOID;
pub type PSECURITY_DESCRIPTOR = PVOID;
pub type PSID = PVOID;
pub type ACCESS_MASK = ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LUID_AND_ATTRIBUTES {
    pub Luid: LUID,
    pub Attributes: ULONG,
}
pub type LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL {
    pub AclRevision: UCHAR,
    pub Sbz1: UCHAR,
    pub AclSize: USHORT,
    pub AceCount: USHORT,
    pub Sbz2: USHORT,
}
pub type ACL = _ACL;
pub type PACL = *mut ACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PRIVILEGE_SET {
    pub PrivilegeCount: ULONG,
    pub Control: ULONG,
    pub Privilege: [LUID_AND_ATTRIBUTES; 1usize],
}
pub type PRIVILEGE_SET = _PRIVILEGE_SET;
impl _SECURITY_IMPERSONATION_LEVEL {
    pub const SecurityAnonymous: _SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL(
        0,
    );
}
impl _SECURITY_IMPERSONATION_LEVEL {
    pub const SecurityIdentification: _SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL(
        1,
    );
}
impl _SECURITY_IMPERSONATION_LEVEL {
    pub const SecurityImpersonation: _SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL(
        2,
    );
}
impl _SECURITY_IMPERSONATION_LEVEL {
    pub const SecurityDelegation: _SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL(
        3,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _SECURITY_IMPERSONATION_LEVEL(pub ::libc::c_int);
pub use self::_SECURITY_IMPERSONATION_LEVEL as SECURITY_IMPERSONATION_LEVEL;
pub type SECURITY_CONTEXT_TRACKING_MODE = BOOLEAN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_QUALITY_OF_SERVICE {
    pub Length: ULONG,
    pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    pub ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE,
    pub EffectiveOnly: BOOLEAN,
}
pub type SECURITY_INFORMATION = ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_STATUS_BLOCK {
    pub __bindgen_anon_1: _IO_STATUS_BLOCK__bindgen_ty_1,
    pub Information: ULONG_PTR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IO_STATUS_BLOCK__bindgen_ty_1 {
    pub Status: NTSTATUS,
    pub Pointer: PVOID,
}
pub type IO_STATUS_BLOCK = _IO_STATUS_BLOCK;
pub type PIO_STATUS_BLOCK = *mut _IO_STATUS_BLOCK;
pub type PIO_APC_ROUTINE = ::core::option::Option<
    unsafe extern "C" fn(
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Reserved: ULONG,
    ),
>;
impl _FILE_INFORMATION_CLASS {
    pub const FileDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        1,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileFullDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        2,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileBothDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        3,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileBasicInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(4);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStandardInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        5,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileInternalInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        6,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileEaInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(7);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileAccessInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        8,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileNameInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(9);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileRenameInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        10,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileLinkInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(11);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileNamesInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        12,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileDispositionInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        13,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FilePositionInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        14,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileFullEaInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        15,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileModeInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(16);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileAlignmentInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        17,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileAllInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(18);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileAllocationInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        19,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileEndOfFileInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        20,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileAlternateNameInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        21,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStreamInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        22,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FilePipeInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(23);
}
impl _FILE_INFORMATION_CLASS {
    pub const FilePipeLocalInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        24,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FilePipeRemoteInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        25,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileMailslotQueryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        26,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileMailslotSetInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        27,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileCompressionInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        28,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileObjectIdInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        29,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileCompletionInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        30,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileMoveClusterInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        31,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileQuotaInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        32,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileReparsePointInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        33,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileNetworkOpenInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        34,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileAttributeTagInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        35,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileTrackingInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        36,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdBothDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        37,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdFullDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        38,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileValidDataLengthInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        39,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileShortNameInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        40,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIoCompletionNotificationInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        41,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIoStatusBlockRangeInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        42,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIoPriorityHintInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        43,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileSfioReserveInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        44,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileSfioVolumeInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        45,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileHardLinkInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        46,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileProcessIdsUsingFileInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        47,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileNormalizedNameInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        48,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileNetworkPhysicalNameInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        49,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdGlobalTxDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        50,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIsRemoteDeviceInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        51,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileUnusedInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        52,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileNumaNodeInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        53,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStandardLinkInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        54,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileRemoteProtocolInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        55,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileRenameInformationBypassAccessCheck: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        56,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileLinkInformationBypassAccessCheck: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        57,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileVolumeNameInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        58,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(59);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdExtdDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        60,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileReplaceCompletionInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        61,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileHardLinkFullIdInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        62,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdExtdBothDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        63,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileDispositionInformationEx: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        64,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileRenameInformationEx: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        65,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileRenameInformationExBypassAccessCheck: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        66,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileDesiredStorageClassInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        67,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStatInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(68);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileMemoryPartitionInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        69,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStatLxInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        70,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileCaseSensitiveInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        71,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileLinkInformationEx: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        72,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileLinkInformationExBypassAccessCheck: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        73,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStorageReserveIdInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        74,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileCaseSensitiveInformationForceAccessCheck: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        75,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileKnownFolderInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        76,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStatBasicInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        77,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileId64ExtdDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        78,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileId64ExtdBothDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        79,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdAllExtdDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        80,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileIdAllExtdBothDirectoryInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        81,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileStreamReservationInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        82,
    );
}
impl _FILE_INFORMATION_CLASS {
    pub const FileMupProviderInfo: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(83);
}
impl _FILE_INFORMATION_CLASS {
    pub const FileMaximumInformation: _FILE_INFORMATION_CLASS = _FILE_INFORMATION_CLASS(
        84,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _FILE_INFORMATION_CLASS(pub ::libc::c_int);
pub use self::_FILE_INFORMATION_CLASS as FILE_INFORMATION_CLASS;
impl _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    pub const DirectoryNotifyInformation: _DIRECTORY_NOTIFY_INFORMATION_CLASS = _DIRECTORY_NOTIFY_INFORMATION_CLASS(
        1,
    );
}
impl _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    pub const DirectoryNotifyExtendedInformation: _DIRECTORY_NOTIFY_INFORMATION_CLASS = _DIRECTORY_NOTIFY_INFORMATION_CLASS(
        2,
    );
}
impl _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    pub const DirectoryNotifyFullInformation: _DIRECTORY_NOTIFY_INFORMATION_CLASS = _DIRECTORY_NOTIFY_INFORMATION_CLASS(
        3,
    );
}
impl _DIRECTORY_NOTIFY_INFORMATION_CLASS {
    pub const DirectoryNotifyMaximumInformation: _DIRECTORY_NOTIFY_INFORMATION_CLASS = _DIRECTORY_NOTIFY_INFORMATION_CLASS(
        4,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _DIRECTORY_NOTIFY_INFORMATION_CLASS(pub ::libc::c_int);
pub use self::_DIRECTORY_NOTIFY_INFORMATION_CLASS as DIRECTORY_NOTIFY_INFORMATION_CLASS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_BASIC_INFORMATION {
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub FileAttributes: ULONG,
}
pub type PFILE_BASIC_INFORMATION = *mut _FILE_BASIC_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_STANDARD_INFORMATION {
    pub AllocationSize: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub NumberOfLinks: ULONG,
    pub DeletePending: BOOLEAN,
    pub Directory: BOOLEAN,
}
pub type PFILE_STANDARD_INFORMATION = *mut _FILE_STANDARD_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_NETWORK_OPEN_INFORMATION {
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub AllocationSize: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub FileAttributes: ULONG,
}
pub type PFILE_NETWORK_OPEN_INFORMATION = *mut _FILE_NETWORK_OPEN_INFORMATION;
impl _FSINFOCLASS {
    pub const FileFsVolumeInformation: _FSINFOCLASS = _FSINFOCLASS(1);
}
impl _FSINFOCLASS {
    pub const FileFsLabelInformation: _FSINFOCLASS = _FSINFOCLASS(2);
}
impl _FSINFOCLASS {
    pub const FileFsSizeInformation: _FSINFOCLASS = _FSINFOCLASS(3);
}
impl _FSINFOCLASS {
    pub const FileFsDeviceInformation: _FSINFOCLASS = _FSINFOCLASS(4);
}
impl _FSINFOCLASS {
    pub const FileFsAttributeInformation: _FSINFOCLASS = _FSINFOCLASS(5);
}
impl _FSINFOCLASS {
    pub const FileFsControlInformation: _FSINFOCLASS = _FSINFOCLASS(6);
}
impl _FSINFOCLASS {
    pub const FileFsFullSizeInformation: _FSINFOCLASS = _FSINFOCLASS(7);
}
impl _FSINFOCLASS {
    pub const FileFsObjectIdInformation: _FSINFOCLASS = _FSINFOCLASS(8);
}
impl _FSINFOCLASS {
    pub const FileFsDriverPathInformation: _FSINFOCLASS = _FSINFOCLASS(9);
}
impl _FSINFOCLASS {
    pub const FileFsVolumeFlagsInformation: _FSINFOCLASS = _FSINFOCLASS(10);
}
impl _FSINFOCLASS {
    pub const FileFsSectorSizeInformation: _FSINFOCLASS = _FSINFOCLASS(11);
}
impl _FSINFOCLASS {
    pub const FileFsDataCopyInformation: _FSINFOCLASS = _FSINFOCLASS(12);
}
impl _FSINFOCLASS {
    pub const FileFsMetadataSizeInformation: _FSINFOCLASS = _FSINFOCLASS(13);
}
impl _FSINFOCLASS {
    pub const FileFsFullSizeInformationEx: _FSINFOCLASS = _FSINFOCLASS(14);
}
impl _FSINFOCLASS {
    pub const FileFsGuidInformation: _FSINFOCLASS = _FSINFOCLASS(15);
}
impl _FSINFOCLASS {
    pub const FileFsMaximumInformation: _FSINFOCLASS = _FSINFOCLASS(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _FSINFOCLASS(pub ::libc::c_int);
pub use self::_FSINFOCLASS as FS_INFORMATION_CLASS;
impl _INTERFACE_TYPE {
    pub const InterfaceTypeUndefined: _INTERFACE_TYPE = _INTERFACE_TYPE(-1);
}
impl _INTERFACE_TYPE {
    pub const Internal: _INTERFACE_TYPE = _INTERFACE_TYPE(0);
}
impl _INTERFACE_TYPE {
    pub const Isa: _INTERFACE_TYPE = _INTERFACE_TYPE(1);
}
impl _INTERFACE_TYPE {
    pub const Eisa: _INTERFACE_TYPE = _INTERFACE_TYPE(2);
}
impl _INTERFACE_TYPE {
    pub const MicroChannel: _INTERFACE_TYPE = _INTERFACE_TYPE(3);
}
impl _INTERFACE_TYPE {
    pub const TurboChannel: _INTERFACE_TYPE = _INTERFACE_TYPE(4);
}
impl _INTERFACE_TYPE {
    pub const PCIBus: _INTERFACE_TYPE = _INTERFACE_TYPE(5);
}
impl _INTERFACE_TYPE {
    pub const VMEBus: _INTERFACE_TYPE = _INTERFACE_TYPE(6);
}
impl _INTERFACE_TYPE {
    pub const NuBus: _INTERFACE_TYPE = _INTERFACE_TYPE(7);
}
impl _INTERFACE_TYPE {
    pub const PCMCIABus: _INTERFACE_TYPE = _INTERFACE_TYPE(8);
}
impl _INTERFACE_TYPE {
    pub const CBus: _INTERFACE_TYPE = _INTERFACE_TYPE(9);
}
impl _INTERFACE_TYPE {
    pub const MPIBus: _INTERFACE_TYPE = _INTERFACE_TYPE(10);
}
impl _INTERFACE_TYPE {
    pub const MPSABus: _INTERFACE_TYPE = _INTERFACE_TYPE(11);
}
impl _INTERFACE_TYPE {
    pub const ProcessorInternal: _INTERFACE_TYPE = _INTERFACE_TYPE(12);
}
impl _INTERFACE_TYPE {
    pub const InternalPowerBus: _INTERFACE_TYPE = _INTERFACE_TYPE(13);
}
impl _INTERFACE_TYPE {
    pub const PNPISABus: _INTERFACE_TYPE = _INTERFACE_TYPE(14);
}
impl _INTERFACE_TYPE {
    pub const PNPBus: _INTERFACE_TYPE = _INTERFACE_TYPE(15);
}
impl _INTERFACE_TYPE {
    pub const Vmcs: _INTERFACE_TYPE = _INTERFACE_TYPE(16);
}
impl _INTERFACE_TYPE {
    pub const ACPIBus: _INTERFACE_TYPE = _INTERFACE_TYPE(17);
}
impl _INTERFACE_TYPE {
    pub const MaximumInterfaceType: _INTERFACE_TYPE = _INTERFACE_TYPE(18);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _INTERFACE_TYPE(pub ::libc::c_int);
pub use self::_INTERFACE_TYPE as INTERFACE_TYPE;
pub type PINTERFACE_REFERENCE = ::core::option::Option<
    unsafe extern "C" fn(Context: PVOID),
>;
pub type PINTERFACE_DEREFERENCE = ::core::option::Option<
    unsafe extern "C" fn(Context: PVOID),
>;
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemUnspecified: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(0);
}
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemWorking: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(1);
}
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemSleeping1: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(2);
}
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemSleeping2: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(3);
}
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemSleeping3: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(4);
}
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemHibernate: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(5);
}
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemShutdown: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(6);
}
impl _SYSTEM_POWER_STATE {
    pub const PowerSystemMaximum: _SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _SYSTEM_POWER_STATE(pub ::libc::c_int);
pub use self::_SYSTEM_POWER_STATE as SYSTEM_POWER_STATE;
impl POWER_ACTION {
    pub const PowerActionNone: POWER_ACTION = POWER_ACTION(0);
}
impl POWER_ACTION {
    pub const PowerActionReserved: POWER_ACTION = POWER_ACTION(1);
}
impl POWER_ACTION {
    pub const PowerActionSleep: POWER_ACTION = POWER_ACTION(2);
}
impl POWER_ACTION {
    pub const PowerActionHibernate: POWER_ACTION = POWER_ACTION(3);
}
impl POWER_ACTION {
    pub const PowerActionShutdown: POWER_ACTION = POWER_ACTION(4);
}
impl POWER_ACTION {
    pub const PowerActionShutdownReset: POWER_ACTION = POWER_ACTION(5);
}
impl POWER_ACTION {
    pub const PowerActionShutdownOff: POWER_ACTION = POWER_ACTION(6);
}
impl POWER_ACTION {
    pub const PowerActionWarmEject: POWER_ACTION = POWER_ACTION(7);
}
impl POWER_ACTION {
    pub const PowerActionDisplayOff: POWER_ACTION = POWER_ACTION(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct POWER_ACTION(pub ::libc::c_int);
impl _DEVICE_POWER_STATE {
    pub const PowerDeviceUnspecified: _DEVICE_POWER_STATE = _DEVICE_POWER_STATE(0);
}
impl _DEVICE_POWER_STATE {
    pub const PowerDeviceD0: _DEVICE_POWER_STATE = _DEVICE_POWER_STATE(1);
}
impl _DEVICE_POWER_STATE {
    pub const PowerDeviceD1: _DEVICE_POWER_STATE = _DEVICE_POWER_STATE(2);
}
impl _DEVICE_POWER_STATE {
    pub const PowerDeviceD2: _DEVICE_POWER_STATE = _DEVICE_POWER_STATE(3);
}
impl _DEVICE_POWER_STATE {
    pub const PowerDeviceD3: _DEVICE_POWER_STATE = _DEVICE_POWER_STATE(4);
}
impl _DEVICE_POWER_STATE {
    pub const PowerDeviceMaximum: _DEVICE_POWER_STATE = _DEVICE_POWER_STATE(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _DEVICE_POWER_STATE(pub ::libc::c_int);
pub use self::_DEVICE_POWER_STATE as DEVICE_POWER_STATE;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _POWER_STATE {
    pub SystemState: SYSTEM_POWER_STATE,
    pub DeviceState: DEVICE_POWER_STATE,
}
pub type POWER_STATE = _POWER_STATE;
impl _POWER_STATE_TYPE {
    pub const SystemPowerState: _POWER_STATE_TYPE = _POWER_STATE_TYPE(0);
}
impl _POWER_STATE_TYPE {
    pub const DevicePowerState: _POWER_STATE_TYPE = _POWER_STATE_TYPE(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _POWER_STATE_TYPE(pub ::libc::c_int);
pub use self::_POWER_STATE_TYPE as POWER_STATE_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_POWER_STATE_CONTEXT {
    pub __bindgen_anon_1: _SYSTEM_POWER_STATE_CONTEXT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_POWER_STATE_CONTEXT__bindgen_ty_1 {
    pub __bindgen_anon_1: _SYSTEM_POWER_STATE_CONTEXT__bindgen_ty_1__bindgen_ty_1,
    pub ContextAsUlong: ULONG,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POWER_STATE_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl _SYSTEM_POWER_STATE_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Reserved1(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn TargetSystemState(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_TargetSystemState(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn EffectiveSystemState(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_EffectiveSystemState(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn CurrentSystemState(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_CurrentSystemState(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn IgnoreHibernationPath(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IgnoreHibernationPath(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn PseudoTransition(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_PseudoTransition(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn KernelSoftReboot(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_KernelSoftReboot(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DirectedDripsTransition(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DirectedDripsTransition(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved2(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved2(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Reserved1: ULONG,
        TargetSystemState: ULONG,
        EffectiveSystemState: ULONG,
        CurrentSystemState: ULONG,
        IgnoreHibernationPath: ULONG,
        PseudoTransition: ULONG,
        KernelSoftReboot: ULONG,
        DirectedDripsTransition: ULONG,
        Reserved2: ULONG,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                8u8,
                {
                    let Reserved1: u32 = unsafe { ::core::mem::transmute(Reserved1) };
                    Reserved1 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                8usize,
                4u8,
                {
                    let TargetSystemState: u32 = unsafe {
                        ::core::mem::transmute(TargetSystemState)
                    };
                    TargetSystemState as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                12usize,
                4u8,
                {
                    let EffectiveSystemState: u32 = unsafe {
                        ::core::mem::transmute(EffectiveSystemState)
                    };
                    EffectiveSystemState as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                16usize,
                4u8,
                {
                    let CurrentSystemState: u32 = unsafe {
                        ::core::mem::transmute(CurrentSystemState)
                    };
                    CurrentSystemState as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                20usize,
                1u8,
                {
                    let IgnoreHibernationPath: u32 = unsafe {
                        ::core::mem::transmute(IgnoreHibernationPath)
                    };
                    IgnoreHibernationPath as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                21usize,
                1u8,
                {
                    let PseudoTransition: u32 = unsafe {
                        ::core::mem::transmute(PseudoTransition)
                    };
                    PseudoTransition as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                22usize,
                1u8,
                {
                    let KernelSoftReboot: u32 = unsafe {
                        ::core::mem::transmute(KernelSoftReboot)
                    };
                    KernelSoftReboot as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                23usize,
                1u8,
                {
                    let DirectedDripsTransition: u32 = unsafe {
                        ::core::mem::transmute(DirectedDripsTransition)
                    };
                    DirectedDripsTransition as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                24usize,
                8u8,
                {
                    let Reserved2: u32 = unsafe { ::core::mem::transmute(Reserved2) };
                    Reserved2 as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type SYSTEM_POWER_STATE_CONTEXT = _SYSTEM_POWER_STATE_CONTEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    pub Type: UCHAR,
    pub ShareDisposition: UCHAR,
    pub Flags: USHORT,
    pub u: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1 {
    pub Generic: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1,
    pub Port: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2,
    pub Interrupt: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_3,
    pub MessageInterrupt: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4,
    pub Memory: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_5,
    pub Dma: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_6,
    pub DmaV3: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_7,
    pub DevicePrivate: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_8,
    pub BusNumber: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_9,
    pub DeviceSpecificData: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_10,
    pub Memory40: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_11,
    pub Memory48: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_12,
    pub Memory64: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_13,
    pub Connection: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_14,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
    pub Start: PHYSICAL_ADDRESS,
    pub Length: ULONG,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2 {
    pub Start: PHYSICAL_ADDRESS,
    pub Length: ULONG,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_3 {
    pub Level: ULONG,
    pub Vector: ULONG,
    pub Affinity: KAFFINITY,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4 {
    pub __bindgen_anon_1: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub Raw: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
    pub Translated: _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    pub Reserved: USHORT,
    pub MessageCount: USHORT,
    pub Vector: ULONG,
    pub Affinity: KAFFINITY,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2 {
    pub Level: ULONG,
    pub Vector: ULONG,
    pub Affinity: KAFFINITY,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_5 {
    pub Start: PHYSICAL_ADDRESS,
    pub Length: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_6 {
    pub Channel: ULONG,
    pub Port: ULONG,
    pub Reserved1: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_7 {
    pub Channel: ULONG,
    pub RequestLine: ULONG,
    pub TransferWidth: UCHAR,
    pub Reserved1: UCHAR,
    pub Reserved2: UCHAR,
    pub Reserved3: UCHAR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_8 {
    pub Data: [ULONG; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_9 {
    pub Start: ULONG,
    pub Length: ULONG,
    pub Reserved: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_10 {
    pub DataSize: ULONG,
    pub Reserved1: ULONG,
    pub Reserved2: ULONG,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_11 {
    pub Start: PHYSICAL_ADDRESS,
    pub Length40: ULONG,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_12 {
    pub Start: PHYSICAL_ADDRESS,
    pub Length48: ULONG,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_13 {
    pub Start: PHYSICAL_ADDRESS,
    pub Length64: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_14 {
    pub Class: UCHAR,
    pub Type: UCHAR,
    pub Reserved1: UCHAR,
    pub Reserved2: UCHAR,
    pub IdLowPart: ULONG,
    pub IdHighPart: ULONG,
}
pub type CM_PARTIAL_RESOURCE_DESCRIPTOR = _CM_PARTIAL_RESOURCE_DESCRIPTOR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CM_PARTIAL_RESOURCE_LIST {
    pub Version: USHORT,
    pub Revision: USHORT,
    pub Count: ULONG,
    pub PartialDescriptors: [CM_PARTIAL_RESOURCE_DESCRIPTOR; 1usize],
}
pub type CM_PARTIAL_RESOURCE_LIST = _CM_PARTIAL_RESOURCE_LIST;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CM_FULL_RESOURCE_DESCRIPTOR {
    pub InterfaceType: INTERFACE_TYPE,
    pub BusNumber: ULONG,
    pub PartialResourceList: CM_PARTIAL_RESOURCE_LIST,
}
pub type CM_FULL_RESOURCE_DESCRIPTOR = _CM_FULL_RESOURCE_DESCRIPTOR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CM_RESOURCE_LIST {
    pub Count: ULONG,
    pub List: [CM_FULL_RESOURCE_DESCRIPTOR; 1usize],
}
pub type PCM_RESOURCE_LIST = *mut _CM_RESOURCE_LIST;
impl _IRQ_DEVICE_POLICY {
    pub const IrqPolicyMachineDefault: _IRQ_DEVICE_POLICY = _IRQ_DEVICE_POLICY(0);
}
impl _IRQ_DEVICE_POLICY {
    pub const IrqPolicyAllCloseProcessors: _IRQ_DEVICE_POLICY = _IRQ_DEVICE_POLICY(1);
}
impl _IRQ_DEVICE_POLICY {
    pub const IrqPolicyOneCloseProcessor: _IRQ_DEVICE_POLICY = _IRQ_DEVICE_POLICY(2);
}
impl _IRQ_DEVICE_POLICY {
    pub const IrqPolicyAllProcessorsInMachine: _IRQ_DEVICE_POLICY = _IRQ_DEVICE_POLICY(
        3,
    );
}
impl _IRQ_DEVICE_POLICY {
    pub const IrqPolicySpecifiedProcessors: _IRQ_DEVICE_POLICY = _IRQ_DEVICE_POLICY(4);
}
impl _IRQ_DEVICE_POLICY {
    pub const IrqPolicySpreadMessagesAcrossAllProcessors: _IRQ_DEVICE_POLICY = _IRQ_DEVICE_POLICY(
        5,
    );
}
impl _IRQ_DEVICE_POLICY {
    pub const IrqPolicyAllProcessorsInMachineWhenSteered: _IRQ_DEVICE_POLICY = _IRQ_DEVICE_POLICY(
        6,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _IRQ_DEVICE_POLICY(pub ::libc::c_int);
pub use self::_IRQ_DEVICE_POLICY as IRQ_DEVICE_POLICY;
impl _IRQ_PRIORITY {
    pub const IrqPriorityUndefined: _IRQ_PRIORITY = _IRQ_PRIORITY(0);
}
impl _IRQ_PRIORITY {
    pub const IrqPriorityLow: _IRQ_PRIORITY = _IRQ_PRIORITY(1);
}
impl _IRQ_PRIORITY {
    pub const IrqPriorityNormal: _IRQ_PRIORITY = _IRQ_PRIORITY(2);
}
impl _IRQ_PRIORITY {
    pub const IrqPriorityHigh: _IRQ_PRIORITY = _IRQ_PRIORITY(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _IRQ_PRIORITY(pub ::libc::c_int);
pub use self::_IRQ_PRIORITY as IRQ_PRIORITY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR {
    pub Option: UCHAR,
    pub Type: UCHAR,
    pub ShareDisposition: UCHAR,
    pub Spare1: UCHAR,
    pub Flags: USHORT,
    pub Spare2: USHORT,
    pub u: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1 {
    pub Port: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1,
    pub Memory: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2,
    pub Interrupt: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_3,
    pub Dma: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4,
    pub DmaV3: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_5,
    pub Generic: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_6,
    pub DevicePrivate: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_7,
    pub BusNumber: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_8,
    pub ConfigData: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_9,
    pub Memory40: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_10,
    pub Memory48: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_11,
    pub Memory64: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_12,
    pub Connection: _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_13,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
    pub Length: ULONG,
    pub Alignment: ULONG,
    pub MinimumAddress: PHYSICAL_ADDRESS,
    pub MaximumAddress: PHYSICAL_ADDRESS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2 {
    pub Length: ULONG,
    pub Alignment: ULONG,
    pub MinimumAddress: PHYSICAL_ADDRESS,
    pub MaximumAddress: PHYSICAL_ADDRESS,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_3 {
    pub MinimumVector: ULONG,
    pub MaximumVector: ULONG,
    pub AffinityPolicy: IRQ_DEVICE_POLICY,
    pub PriorityPolicy: IRQ_PRIORITY,
    pub TargetedProcessors: KAFFINITY,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_4 {
    pub MinimumChannel: ULONG,
    pub MaximumChannel: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_5 {
    pub RequestLine: ULONG,
    pub Reserved: ULONG,
    pub Channel: ULONG,
    pub TransferWidth: ULONG,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_6 {
    pub Length: ULONG,
    pub Alignment: ULONG,
    pub MinimumAddress: PHYSICAL_ADDRESS,
    pub MaximumAddress: PHYSICAL_ADDRESS,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_7 {
    pub Data: [ULONG; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_8 {
    pub Length: ULONG,
    pub MinBusNumber: ULONG,
    pub MaxBusNumber: ULONG,
    pub Reserved: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_9 {
    pub Priority: ULONG,
    pub Reserved1: ULONG,
    pub Reserved2: ULONG,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_10 {
    pub Length40: ULONG,
    pub Alignment40: ULONG,
    pub MinimumAddress: PHYSICAL_ADDRESS,
    pub MaximumAddress: PHYSICAL_ADDRESS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_11 {
    pub Length48: ULONG,
    pub Alignment48: ULONG,
    pub MinimumAddress: PHYSICAL_ADDRESS,
    pub MaximumAddress: PHYSICAL_ADDRESS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_12 {
    pub Length64: ULONG,
    pub Alignment64: ULONG,
    pub MinimumAddress: PHYSICAL_ADDRESS,
    pub MaximumAddress: PHYSICAL_ADDRESS,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_RESOURCE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_13 {
    pub Class: UCHAR,
    pub Type: UCHAR,
    pub Reserved1: UCHAR,
    pub Reserved2: UCHAR,
    pub IdLowPart: ULONG,
    pub IdHighPart: ULONG,
}
pub type IO_RESOURCE_DESCRIPTOR = _IO_RESOURCE_DESCRIPTOR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_LIST {
    pub Version: USHORT,
    pub Revision: USHORT,
    pub Count: ULONG,
    pub Descriptors: [IO_RESOURCE_DESCRIPTOR; 1usize],
}
pub type IO_RESOURCE_LIST = _IO_RESOURCE_LIST;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_RESOURCE_REQUIREMENTS_LIST {
    pub ListSize: ULONG,
    pub InterfaceType: INTERFACE_TYPE,
    pub BusNumber: ULONG,
    pub SlotNumber: ULONG,
    pub Reserved: [ULONG; 3usize],
    pub AlternativeLists: ULONG,
    pub List: [IO_RESOURCE_LIST; 1usize],
}
pub type PIO_RESOURCE_REQUIREMENTS_LIST = *mut _IO_RESOURCE_REQUIREMENTS_LIST;
extern "C" {
    pub fn DbgPrintEx(ComponentId: ULONG, Level: ULONG, Format: PCSTR, ...) -> ULONG;
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SYSTEM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(0);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SMSS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(1);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SETUP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(2);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_NTFS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(3);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FSTUB_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(4);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CRASHDUMP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(5);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CDAUDIO_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(6);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CDROM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(7);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CLASSPNP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(8);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DISK_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(9);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_REDBOOK_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(10);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_STORPROP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(11);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SCSIPORT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(12);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SCSIMINIPORT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(13);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CONFIG_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(14);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_I8042PRT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(15);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SERMOUSE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(16);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_LSERMOUS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(17);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_KBDHID_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(18);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MOUHID_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(19);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_KBDCLASS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(20);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MOUCLASS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(21);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_TWOTRACK_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(22);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WMILIB_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(23);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_ACPI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(24);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_AMLI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(25);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_HALIA64_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(26);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VIDEO_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(27);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SVCHOST_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(28);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VIDEOPRT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(29);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_TCPIP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(30);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DMSYNTH_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(31);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_NTOSPNP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(32);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FASTFAT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(33);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SAMSS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(34);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PNPMGR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(35);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_NETAPI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(36);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SCSERVER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(37);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SCCLIENT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(38);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SERIAL_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(39);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SERENUM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(40);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_UHCD_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(41);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_RPCPROXY_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(42);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_AUTOCHK_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(43);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DCOMSS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(44);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_UNIMODEM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(45);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SIS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(46);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FLTMGR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(47);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WMICORE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(48);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_BURNENG_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(49);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IMAPI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(50);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SXS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(51);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FUSION_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(52);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IDLETASK_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(53);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SOFTPCI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(54);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_TAPE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(55);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MCHGR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(56);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IDEP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(57);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PCIIDE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(58);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FLOPPY_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(59);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FDC_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(60);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_TERMSRV_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(61);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_W32TIME_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(62);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PREFETCHER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(63);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_RSFILTER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(64);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FCPORT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(65);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PCI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(66);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DMIO_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(67);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DMCONFIG_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(68);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DMADMIN_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(69);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WSOCKTRANSPORT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(70);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VSS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(71);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PNPMEM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(72);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PROCESSOR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(73);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DMSERVER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(74);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(75);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_INFINIBAND_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(76);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IHVDRIVER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(77);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IHVVIDEO_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(78);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IHVAUDIO_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(79);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IHVNETWORK_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(80);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IHVSTREAMING_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(81);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IHVBUS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(82);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_HPS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(83);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_RTLTHREADPOOL_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(84);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_LDR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(85);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_TCPIP6_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(86);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_ISAPNP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(87);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SHPC_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(88);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_STORPORT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(89);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_STORMINIPORT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(90);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PRINTSPOOLER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(91);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VSSDYNDISK_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(92);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VERIFIER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(93);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VDS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(94);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VDSBAS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(95);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VDSDYN_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(96);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VDSDYNDR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(97);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VDSLDR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(98);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VDSUTIL_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(99);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DFRGIFC_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(100);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DEFAULT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(101);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(102);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DFSC_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(103);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WOW64_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(104);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_ALPC_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(105);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WDI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(106);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PERFLIB_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(107);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_KTM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(108);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_IOSTRESS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(109);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_HEAP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(110);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WHEA_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(111);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_USERGDI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(112);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MMCSS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(113);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_TPM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(114);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_THREADORDER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(115);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_ENVIRON_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(116);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_EMS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(117);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WDT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(118);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FVEVOL_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(119);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_NDIS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(120);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_NVCTRACE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(121);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_LUAFV_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(122);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_APPCOMPAT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(123);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_USBSTOR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(124);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SBP2PORT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(125);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_COVERAGE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(126);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CACHEMGR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(127);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MOUNTMGR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(128);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CFR_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(129);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_TXF_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(130);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_KSECDD_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(131);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FLTREGRESS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(132);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MPIO_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(133);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_MSDSM_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(134);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_UDFS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(135);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_PSHED_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(136);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_STORVSP_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(137);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_LSASS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(138);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SSPICLI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(139);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CNG_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(140);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_EXFAT_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(141);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FILETRACE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(142);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_XSAVE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(143);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_SE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(144);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_DRIVEEXTENDER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(145);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_POWER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(146);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CRASHDUMPXHCI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(147);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_GPIO_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(148);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_REFS_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(149);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_WER_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(150);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_CAPIMG_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(151);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_VPCI_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(152);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_STORAGECLASSMEMORY_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(153);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_FSLIB_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(154);
}
impl _DPFLTR_TYPE {
    pub const DPFLTR_ENDOFTABLE_ID: _DPFLTR_TYPE = _DPFLTR_TYPE(155);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _DPFLTR_TYPE(pub ::libc::c_int);
pub use self::_DPFLTR_TYPE as DPFLTR_TYPE;
pub type KPROCESSOR_MODE = CCHAR;
impl _MODE {
    pub const KernelMode: _MODE = _MODE(0);
}
impl _MODE {
    pub const UserMode: _MODE = _MODE(1);
}
impl _MODE {
    pub const MaximumMode: _MODE = _MODE(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _MODE(pub ::libc::c_int);
pub use self::_MODE as MODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KAPC {
    pub Type: UCHAR,
    pub AllFlags: UCHAR,
    pub Size: UCHAR,
    pub SpareByte1: UCHAR,
    pub SpareLong0: ULONG,
    pub Thread: *mut _KTHREAD,
    pub ApcListEntry: LIST_ENTRY,
    pub Reserved: [PVOID; 3usize],
    pub NormalContext: PVOID,
    pub SystemArgument1: PVOID,
    pub SystemArgument2: PVOID,
    pub ApcStateIndex: CCHAR,
    pub ApcMode: KPROCESSOR_MODE,
    pub Inserted: BOOLEAN,
}
pub type KAPC = _KAPC;
pub type KDEFERRED_ROUTINE = ::core::option::Option<
    unsafe extern "C" fn(
        Dpc: *mut _KDPC,
        DeferredContext: PVOID,
        SystemArgument1: PVOID,
        SystemArgument2: PVOID,
    ),
>;
pub type PKDEFERRED_ROUTINE = KDEFERRED_ROUTINE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KDPC {
    pub __bindgen_anon_1: _KDPC__bindgen_ty_1,
    pub DpcListEntry: SINGLE_LIST_ENTRY,
    pub ProcessorHistory: KAFFINITY,
    pub DeferredRoutine: PKDEFERRED_ROUTINE,
    pub DeferredContext: PVOID,
    pub SystemArgument1: PVOID,
    pub SystemArgument2: PVOID,
    pub DpcData: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KDPC__bindgen_ty_1 {
    pub TargetInfoAsUlong: ULONG,
    pub __bindgen_anon_1: _KDPC__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KDPC__bindgen_ty_1__bindgen_ty_1 {
    pub Type: UCHAR,
    pub Importance: UCHAR,
    pub Number: USHORT,
}
pub type KDPC = _KDPC;
pub type PKDPC = *mut _KDPC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MDL {
    pub Next: *mut _MDL,
    pub Size: CSHORT,
    pub MdlFlags: CSHORT,
    pub Process: *mut _EPROCESS,
    pub MappedSystemVa: PVOID,
    pub StartVa: PVOID,
    pub ByteCount: ULONG,
    pub ByteOffset: ULONG,
}
pub type PMDL = *mut _MDL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPATCHER_HEADER {
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1,
    pub SignalState: LONG,
    pub WaitListHead: LIST_ENTRY,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6,
    pub __bindgen_anon_7: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_1 {
    pub Lock: LONG,
    pub LockNV: LONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_2 {
    pub Type: UCHAR,
    pub Signalling: UCHAR,
    pub Size: UCHAR,
    pub Reserved1: UCHAR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3 {
    pub TimerType: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
    pub Hand: UCHAR,
    pub __bindgen_anon_2: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {
    pub TimerControlFlags: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Absolute(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Absolute(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Wake(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Wake(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn EncodedTolerableDelay(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_EncodedTolerableDelay(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Absolute: UCHAR,
        Wake: UCHAR,
        EncodedTolerableDelay: UCHAR,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let Absolute: u8 = unsafe { ::core::mem::transmute(Absolute) };
                    Absolute as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let Wake: u8 = unsafe { ::core::mem::transmute(Wake) };
                    Wake as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                6u8,
                {
                    let EncodedTolerableDelay: u8 = unsafe {
                        ::core::mem::transmute(EncodedTolerableDelay)
                    };
                    EncodedTolerableDelay as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_2 {
    pub TimerMiscFlags: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn Index(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_Index(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn Inserted(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Inserted(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Expired(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Expired(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Index: UCHAR,
        Inserted: UCHAR,
        Expired: UCHAR,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                6u8,
                {
                    let Index: u8 = unsafe { ::core::mem::transmute(Index) };
                    Index as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                6usize,
                1u8,
                {
                    let Inserted: u8 = unsafe { ::core::mem::transmute(Inserted) };
                    Inserted as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                7usize,
                1u8,
                {
                    let Expired: u8 = unsafe { ::core::mem::transmute(Expired) };
                    Expired as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_4 {
    pub Timer2Type: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub Timer2ComponentId: UCHAR,
    pub Timer2RelativeId: UCHAR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub Timer2Flags: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Timer2Inserted(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Timer2Inserted(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Timer2Expiring(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Timer2Expiring(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Timer2CancelPending(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Timer2CancelPending(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Timer2SetPending(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Timer2SetPending(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Timer2Running(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Timer2Running(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Timer2Disabled(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Timer2Disabled(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Timer2ReservedFlags(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_Timer2ReservedFlags(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Timer2Inserted: UCHAR,
        Timer2Expiring: UCHAR,
        Timer2CancelPending: UCHAR,
        Timer2SetPending: UCHAR,
        Timer2Running: UCHAR,
        Timer2Disabled: UCHAR,
        Timer2ReservedFlags: UCHAR,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let Timer2Inserted: u8 = unsafe {
                        ::core::mem::transmute(Timer2Inserted)
                    };
                    Timer2Inserted as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let Timer2Expiring: u8 = unsafe {
                        ::core::mem::transmute(Timer2Expiring)
                    };
                    Timer2Expiring as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                1u8,
                {
                    let Timer2CancelPending: u8 = unsafe {
                        ::core::mem::transmute(Timer2CancelPending)
                    };
                    Timer2CancelPending as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                1u8,
                {
                    let Timer2SetPending: u8 = unsafe {
                        ::core::mem::transmute(Timer2SetPending)
                    };
                    Timer2SetPending as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                4usize,
                1u8,
                {
                    let Timer2Running: u8 = unsafe {
                        ::core::mem::transmute(Timer2Running)
                    };
                    Timer2Running as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                5usize,
                1u8,
                {
                    let Timer2Disabled: u8 = unsafe {
                        ::core::mem::transmute(Timer2Disabled)
                    };
                    Timer2Disabled as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                6usize,
                2u8,
                {
                    let Timer2ReservedFlags: u8 = unsafe {
                        ::core::mem::transmute(Timer2ReservedFlags)
                    };
                    Timer2ReservedFlags as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_5 {
    pub QueueType: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub QueueSize: UCHAR,
    pub QueueReserved: UCHAR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub QueueControlFlags: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Abandoned(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Abandoned(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DisableIncrement(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DisableIncrement(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn QueueReservedControlFlags(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_QueueReservedControlFlags(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Abandoned: UCHAR,
        DisableIncrement: UCHAR,
        QueueReservedControlFlags: UCHAR,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let Abandoned: u8 = unsafe { ::core::mem::transmute(Abandoned) };
                    Abandoned as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let DisableIncrement: u8 = unsafe {
                        ::core::mem::transmute(DisableIncrement)
                    };
                    DisableIncrement as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                6u8,
                {
                    let QueueReservedControlFlags: u8 = unsafe {
                        ::core::mem::transmute(QueueReservedControlFlags)
                    };
                    QueueReservedControlFlags as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6 {
    pub ThreadType: UCHAR,
    pub ThreadReserved: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1,
    pub __bindgen_anon_2: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1 {
    pub ThreadControlFlags: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn CycleProfiling(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_CycleProfiling(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn CounterProfiling(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_CounterProfiling(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn GroupScheduling(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_GroupScheduling(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn AffinitySet(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_AffinitySet(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Tagged(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Tagged(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn EnergyProfiling(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_EnergyProfiling(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SchedulerAssist(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_SchedulerAssist(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ThreadReservedControlFlags(&self) -> UCHAR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ThreadReservedControlFlags(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        CycleProfiling: UCHAR,
        CounterProfiling: UCHAR,
        GroupScheduling: UCHAR,
        AffinitySet: UCHAR,
        Tagged: UCHAR,
        EnergyProfiling: UCHAR,
        SchedulerAssist: UCHAR,
        ThreadReservedControlFlags: UCHAR,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let CycleProfiling: u8 = unsafe {
                        ::core::mem::transmute(CycleProfiling)
                    };
                    CycleProfiling as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let CounterProfiling: u8 = unsafe {
                        ::core::mem::transmute(CounterProfiling)
                    };
                    CounterProfiling as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                1u8,
                {
                    let GroupScheduling: u8 = unsafe {
                        ::core::mem::transmute(GroupScheduling)
                    };
                    GroupScheduling as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                1u8,
                {
                    let AffinitySet: u8 = unsafe { ::core::mem::transmute(AffinitySet) };
                    AffinitySet as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                4usize,
                1u8,
                {
                    let Tagged: u8 = unsafe { ::core::mem::transmute(Tagged) };
                    Tagged as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                5usize,
                1u8,
                {
                    let EnergyProfiling: u8 = unsafe {
                        ::core::mem::transmute(EnergyProfiling)
                    };
                    EnergyProfiling as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                6usize,
                1u8,
                {
                    let SchedulerAssist: u8 = unsafe {
                        ::core::mem::transmute(SchedulerAssist)
                    };
                    SchedulerAssist as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                7usize,
                1u8,
                {
                    let ThreadReservedControlFlags: u8 = unsafe {
                        ::core::mem::transmute(ThreadReservedControlFlags)
                    };
                    ThreadReservedControlFlags as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2 {
    pub DebugActive: UCHAR,
    pub __bindgen_anon_1: _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_6__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn ActiveDR7(&self) -> BOOLEAN {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ActiveDR7(&mut self, val: BOOLEAN) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Instrumented(&self) -> BOOLEAN {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Instrumented(&mut self, val: BOOLEAN) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Minimal(&self) -> BOOLEAN {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Minimal(&mut self, val: BOOLEAN) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved4(&self) -> BOOLEAN {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_Reserved4(&mut self, val: BOOLEAN) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn AltSyscall(&self) -> BOOLEAN {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_AltSyscall(&mut self, val: BOOLEAN) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Emulation(&self) -> BOOLEAN {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Emulation(&mut self, val: BOOLEAN) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved5(&self) -> BOOLEAN {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Reserved5(&mut self, val: BOOLEAN) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ActiveDR7: BOOLEAN,
        Instrumented: BOOLEAN,
        Minimal: BOOLEAN,
        Reserved4: BOOLEAN,
        AltSyscall: BOOLEAN,
        Emulation: BOOLEAN,
        Reserved5: BOOLEAN,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let ActiveDR7: u8 = unsafe { ::core::mem::transmute(ActiveDR7) };
                    ActiveDR7 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let Instrumented: u8 = unsafe {
                        ::core::mem::transmute(Instrumented)
                    };
                    Instrumented as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                1u8,
                {
                    let Minimal: u8 = unsafe { ::core::mem::transmute(Minimal) };
                    Minimal as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                2u8,
                {
                    let Reserved4: u8 = unsafe { ::core::mem::transmute(Reserved4) };
                    Reserved4 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                5usize,
                1u8,
                {
                    let AltSyscall: u8 = unsafe { ::core::mem::transmute(AltSyscall) };
                    AltSyscall as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                6usize,
                1u8,
                {
                    let Emulation: u8 = unsafe { ::core::mem::transmute(Emulation) };
                    Emulation as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                7usize,
                1u8,
                {
                    let Reserved5: u8 = unsafe { ::core::mem::transmute(Reserved5) };
                    Reserved5 as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_HEADER__bindgen_ty_1__bindgen_ty_7 {
    pub MutantType: UCHAR,
    pub MutantSize: UCHAR,
    pub DpcActive: BOOLEAN,
    pub MutantReserved: UCHAR,
}
pub type DISPATCHER_HEADER = _DISPATCHER_HEADER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KEVENT {
    pub Header: DISPATCHER_HEADER,
}
pub type KEVENT = _KEVENT;
pub type PKEVENT = *mut _KEVENT;
extern "C" {
    pub fn KeGetCurrentIrql() -> KIRQL;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KDEVICE_QUEUE {
    pub Type: CSHORT,
    pub Size: CSHORT,
    pub DeviceListHead: LIST_ENTRY,
    pub Lock: KSPIN_LOCK,
    pub __bindgen_anon_1: _KDEVICE_QUEUE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KDEVICE_QUEUE__bindgen_ty_1 {
    pub Busy: BOOLEAN,
    pub __bindgen_anon_1: _KDEVICE_QUEUE__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KDEVICE_QUEUE__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _KDEVICE_QUEUE__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Reserved(&self) -> LONG64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: LONG64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn Hint(&self) -> LONG64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 56u8) as u64) }
    }
    #[inline]
    pub fn set_Hint(&mut self, val: LONG64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 56u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Reserved: LONG64,
        Hint: LONG64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                8u8,
                {
                    let Reserved: u64 = unsafe { ::core::mem::transmute(Reserved) };
                    Reserved as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                8usize,
                56u8,
                {
                    let Hint: u64 = unsafe { ::core::mem::transmute(Hint) };
                    Hint as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type KDEVICE_QUEUE = _KDEVICE_QUEUE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KDEVICE_QUEUE_ENTRY {
    pub DeviceListEntry: LIST_ENTRY,
    pub SortKey: ULONG,
    pub Inserted: BOOLEAN,
}
pub type KDEVICE_QUEUE_ENTRY = _KDEVICE_QUEUE_ENTRY;
extern "C" {
    pub fn KeDelayExecutionThread(
        WaitMode: KPROCESSOR_MODE,
        Alertable: BOOLEAN,
        Interval: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeBugCheckEx(
        BugCheckCode: ULONG,
        BugCheckParameter1: ULONG_PTR,
        BugCheckParameter2: ULONG_PTR,
        BugCheckParameter3: ULONG_PTR,
        BugCheckParameter4: ULONG_PTR,
    ) -> !;
}
pub type ERESOURCE_THREAD = ULONG_PTR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OWNER_ENTRY {
    pub OwnerThread: ERESOURCE_THREAD,
    pub __bindgen_anon_1: _OWNER_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OWNER_ENTRY__bindgen_ty_1 {
    pub __bindgen_anon_1: _OWNER_ENTRY__bindgen_ty_1__bindgen_ty_1,
    pub TableSize: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OWNER_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl _OWNER_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn IoPriorityBoosted(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IoPriorityBoosted(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn OwnerReferenced(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_OwnerReferenced(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IoQoSPriorityBoosted(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IoQoSPriorityBoosted(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn OwnerCount(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_OwnerCount(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        IoPriorityBoosted: ULONG,
        OwnerReferenced: ULONG,
        IoQoSPriorityBoosted: ULONG,
        OwnerCount: ULONG,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let IoPriorityBoosted: u32 = unsafe {
                        ::core::mem::transmute(IoPriorityBoosted)
                    };
                    IoPriorityBoosted as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let OwnerReferenced: u32 = unsafe {
                        ::core::mem::transmute(OwnerReferenced)
                    };
                    OwnerReferenced as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                1u8,
                {
                    let IoQoSPriorityBoosted: u32 = unsafe {
                        ::core::mem::transmute(IoQoSPriorityBoosted)
                    };
                    IoQoSPriorityBoosted as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                29u8,
                {
                    let OwnerCount: u32 = unsafe { ::core::mem::transmute(OwnerCount) };
                    OwnerCount as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type OWNER_ENTRY = _OWNER_ENTRY;
pub type POWNER_ENTRY = *mut _OWNER_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ERESOURCE {
    pub SystemResourcesList: LIST_ENTRY,
    pub OwnerTable: POWNER_ENTRY,
    pub ActiveCount: SHORT,
    pub __bindgen_anon_1: _ERESOURCE__bindgen_ty_1,
    pub SharedWaiters: PVOID,
    pub ExclusiveWaiters: PVOID,
    pub OwnerEntry: OWNER_ENTRY,
    pub ActiveEntries: ULONG,
    pub ContentionCount: ULONG,
    pub NumberOfSharedWaiters: ULONG,
    pub NumberOfExclusiveWaiters: ULONG,
    pub MiscFlags: CHAR,
    pub Reserved1: [UCHAR; 3usize],
    pub ResourceTimeoutCount: ULONG,
    pub __bindgen_anon_2: _ERESOURCE__bindgen_ty_2,
    pub SpinLock: KSPIN_LOCK,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ERESOURCE__bindgen_ty_1 {
    pub Flag: USHORT,
    pub __bindgen_anon_1: _ERESOURCE__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ERESOURCE__bindgen_ty_1__bindgen_ty_1 {
    pub ReservedLowFlags: UCHAR,
    pub WaiterPriority: UCHAR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ERESOURCE__bindgen_ty_2 {
    pub Address: PVOID,
    pub CreatorBackTraceIndex: ULONG_PTR,
}
extern "C" {
    pub fn MmUnmapIoSpace(BaseAddress: PVOID, NumberOfBytes: SIZE_T);
}
extern "C" {
    pub fn MmMapIoSpaceEx(
        PhysicalAddress: PHYSICAL_ADDRESS,
        NumberOfBytes: SIZE_T,
        Protect: ULONG,
    ) -> PVOID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_SUBJECT_CONTEXT {
    pub ClientToken: PACCESS_TOKEN,
    pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    pub PrimaryToken: PACCESS_TOKEN,
    pub ProcessAuditId: PVOID,
}
pub type SECURITY_SUBJECT_CONTEXT = _SECURITY_SUBJECT_CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _INITIAL_PRIVILEGE_SET {
    pub PrivilegeCount: ULONG,
    pub Control: ULONG,
    pub Privilege: [LUID_AND_ATTRIBUTES; 3usize],
}
pub type INITIAL_PRIVILEGE_SET = _INITIAL_PRIVILEGE_SET;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ACCESS_STATE {
    pub OperationID: LUID,
    pub SecurityEvaluated: BOOLEAN,
    pub GenerateAudit: BOOLEAN,
    pub GenerateOnClose: BOOLEAN,
    pub PrivilegesAllocated: BOOLEAN,
    pub Flags: ULONG,
    pub RemainingDesiredAccess: ACCESS_MASK,
    pub PreviouslyGrantedAccess: ACCESS_MASK,
    pub OriginalDesiredAccess: ACCESS_MASK,
    pub SubjectSecurityContext: SECURITY_SUBJECT_CONTEXT,
    pub SecurityDescriptor: PSECURITY_DESCRIPTOR,
    pub AuxData: PVOID,
    pub Privileges: _ACCESS_STATE__bindgen_ty_1,
    pub AuditPrivileges: BOOLEAN,
    pub ObjectName: UNICODE_STRING,
    pub ObjectTypeName: UNICODE_STRING,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ACCESS_STATE__bindgen_ty_1 {
    pub InitialPrivilegeSet: INITIAL_PRIVILEGE_SET,
    pub PrivilegeSet: PRIVILEGE_SET,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NAMED_PIPE_CREATE_PARAMETERS {
    pub NamedPipeType: ULONG,
    pub ReadMode: ULONG,
    pub CompletionMode: ULONG,
    pub MaximumInstances: ULONG,
    pub InboundQuota: ULONG,
    pub OutboundQuota: ULONG,
    pub DefaultTimeout: LARGE_INTEGER,
    pub TimeoutSpecified: BOOLEAN,
}
pub type PNAMED_PIPE_CREATE_PARAMETERS = *mut _NAMED_PIPE_CREATE_PARAMETERS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MAILSLOT_CREATE_PARAMETERS {
    pub MailslotQuota: ULONG,
    pub MaximumMessageSize: ULONG,
    pub ReadTimeout: LARGE_INTEGER,
    pub TimeoutSpecified: BOOLEAN,
}
pub type PMAILSLOT_CREATE_PARAMETERS = *mut _MAILSLOT_CREATE_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCSI_REQUEST_BLOCK {
    _unused: [u8; 0],
}
pub type DRIVER_INITIALIZE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverObject: *mut _DRIVER_OBJECT,
        RegistryPath: PUNICODE_STRING,
    ) -> NTSTATUS,
>;
pub type PDRIVER_INITIALIZE = DRIVER_INITIALIZE;
pub type DRIVER_CANCEL = ::core::option::Option<
    unsafe extern "C" fn(DeviceObject: *mut _DEVICE_OBJECT, Irp: *mut _IRP),
>;
pub type PDRIVER_CANCEL = DRIVER_CANCEL;
pub type DRIVER_DISPATCH = ::core::option::Option<
    unsafe extern "C" fn(DeviceObject: *mut _DEVICE_OBJECT, Irp: *mut _IRP) -> NTSTATUS,
>;
pub type PDRIVER_DISPATCH = DRIVER_DISPATCH;
pub type DRIVER_STARTIO = ::core::option::Option<
    unsafe extern "C" fn(DeviceObject: *mut _DEVICE_OBJECT, Irp: *mut _IRP),
>;
pub type PDRIVER_STARTIO = DRIVER_STARTIO;
pub type DRIVER_UNLOAD = ::core::option::Option<
    unsafe extern "C" fn(DriverObject: *mut _DRIVER_OBJECT),
>;
pub type PDRIVER_UNLOAD = DRIVER_UNLOAD;
pub type DRIVER_ADD_DEVICE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverObject: *mut _DRIVER_OBJECT,
        PhysicalDeviceObject: *mut _DEVICE_OBJECT,
    ) -> NTSTATUS,
>;
pub type PDRIVER_ADD_DEVICE = DRIVER_ADD_DEVICE;
pub type FAST_IO_CHECK_IF_POSSIBLE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        LockKey: ULONG,
        CheckForReadOperation: BOOLEAN,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_CHECK_IF_POSSIBLE = FAST_IO_CHECK_IF_POSSIBLE;
pub type FAST_IO_READ = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        LockKey: ULONG,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_READ = FAST_IO_READ;
pub type FAST_IO_WRITE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        LockKey: ULONG,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_WRITE = FAST_IO_WRITE;
pub type FAST_IO_QUERY_BASIC_INFO = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        Wait: BOOLEAN,
        Buffer: PFILE_BASIC_INFORMATION,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_QUERY_BASIC_INFO = FAST_IO_QUERY_BASIC_INFO;
pub type FAST_IO_QUERY_STANDARD_INFO = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        Wait: BOOLEAN,
        Buffer: PFILE_STANDARD_INFORMATION,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_QUERY_STANDARD_INFO = FAST_IO_QUERY_STANDARD_INFO;
pub type FAST_IO_LOCK = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        ProcessId: PEPROCESS,
        Key: ULONG,
        FailImmediately: BOOLEAN,
        ExclusiveLock: BOOLEAN,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_LOCK = FAST_IO_LOCK;
pub type FAST_IO_UNLOCK_SINGLE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        ProcessId: PEPROCESS,
        Key: ULONG,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_UNLOCK_SINGLE = FAST_IO_UNLOCK_SINGLE;
pub type FAST_IO_UNLOCK_ALL = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        ProcessId: PEPROCESS,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_UNLOCK_ALL = FAST_IO_UNLOCK_ALL;
pub type FAST_IO_UNLOCK_ALL_BY_KEY = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        ProcessId: PVOID,
        Key: ULONG,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_UNLOCK_ALL_BY_KEY = FAST_IO_UNLOCK_ALL_BY_KEY;
pub type FAST_IO_DEVICE_CONTROL = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        Wait: BOOLEAN,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
        IoControlCode: ULONG,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_DEVICE_CONTROL = FAST_IO_DEVICE_CONTROL;
pub type FAST_IO_ACQUIRE_FILE = ::core::option::Option<
    unsafe extern "C" fn(FileObject: *mut _FILE_OBJECT),
>;
pub type PFAST_IO_ACQUIRE_FILE = FAST_IO_ACQUIRE_FILE;
pub type FAST_IO_RELEASE_FILE = ::core::option::Option<
    unsafe extern "C" fn(FileObject: *mut _FILE_OBJECT),
>;
pub type PFAST_IO_RELEASE_FILE = FAST_IO_RELEASE_FILE;
pub type FAST_IO_DETACH_DEVICE = ::core::option::Option<
    unsafe extern "C" fn(
        SourceDevice: *mut _DEVICE_OBJECT,
        TargetDevice: *mut _DEVICE_OBJECT,
    ),
>;
pub type PFAST_IO_DETACH_DEVICE = FAST_IO_DETACH_DEVICE;
pub type FAST_IO_QUERY_NETWORK_OPEN_INFO = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        Wait: BOOLEAN,
        Buffer: *mut _FILE_NETWORK_OPEN_INFORMATION,
        IoStatus: *mut _IO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_QUERY_NETWORK_OPEN_INFO = FAST_IO_QUERY_NETWORK_OPEN_INFO;
pub type FAST_IO_MDL_READ = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_MDL_READ = FAST_IO_MDL_READ;
pub type FAST_IO_MDL_READ_COMPLETE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        MdlChain: PMDL,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_MDL_READ_COMPLETE = FAST_IO_MDL_READ_COMPLETE;
pub type FAST_IO_PREPARE_MDL_WRITE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_PREPARE_MDL_WRITE = FAST_IO_PREPARE_MDL_WRITE;
pub type FAST_IO_MDL_WRITE_COMPLETE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        MdlChain: PMDL,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_MDL_WRITE_COMPLETE = FAST_IO_MDL_WRITE_COMPLETE;
pub type FAST_IO_ACQUIRE_FOR_MOD_WRITE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        EndingOffset: PLARGE_INTEGER,
        ResourceToRelease: *mut *mut _ERESOURCE,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> NTSTATUS,
>;
pub type PFAST_IO_ACQUIRE_FOR_MOD_WRITE = FAST_IO_ACQUIRE_FOR_MOD_WRITE;
pub type FAST_IO_RELEASE_FOR_MOD_WRITE = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        ResourceToRelease: *mut _ERESOURCE,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> NTSTATUS,
>;
pub type PFAST_IO_RELEASE_FOR_MOD_WRITE = FAST_IO_RELEASE_FOR_MOD_WRITE;
pub type FAST_IO_ACQUIRE_FOR_CCFLUSH = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> NTSTATUS,
>;
pub type PFAST_IO_ACQUIRE_FOR_CCFLUSH = FAST_IO_ACQUIRE_FOR_CCFLUSH;
pub type FAST_IO_RELEASE_FOR_CCFLUSH = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> NTSTATUS,
>;
pub type PFAST_IO_RELEASE_FOR_CCFLUSH = FAST_IO_RELEASE_FOR_CCFLUSH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMPRESSED_DATA_INFO {
    _unused: [u8; 0],
}
pub type FAST_IO_READ_COMPRESSED = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        Buffer: PVOID,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
        CompressedDataInfo: *mut _COMPRESSED_DATA_INFO,
        CompressedDataInfoLength: ULONG,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_READ_COMPRESSED = FAST_IO_READ_COMPRESSED;
pub type FAST_IO_WRITE_COMPRESSED = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        Buffer: PVOID,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
        CompressedDataInfo: *mut _COMPRESSED_DATA_INFO,
        CompressedDataInfoLength: ULONG,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_WRITE_COMPRESSED = FAST_IO_WRITE_COMPRESSED;
pub type FAST_IO_MDL_READ_COMPLETE_COMPRESSED = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        MdlChain: PMDL,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_MDL_READ_COMPLETE_COMPRESSED = FAST_IO_MDL_READ_COMPLETE_COMPRESSED;
pub type FAST_IO_MDL_WRITE_COMPLETE_COMPRESSED = ::core::option::Option<
    unsafe extern "C" fn(
        FileObject: *mut _FILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        MdlChain: PMDL,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED = FAST_IO_MDL_WRITE_COMPLETE_COMPRESSED;
pub type FAST_IO_QUERY_OPEN = ::core::option::Option<
    unsafe extern "C" fn(
        Irp: *mut _IRP,
        NetworkInformation: PFILE_NETWORK_OPEN_INFORMATION,
        DeviceObject: *mut _DEVICE_OBJECT,
    ) -> BOOLEAN,
>;
pub type PFAST_IO_QUERY_OPEN = FAST_IO_QUERY_OPEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FAST_IO_DISPATCH {
    pub SizeOfFastIoDispatch: ULONG,
    pub FastIoCheckIfPossible: PFAST_IO_CHECK_IF_POSSIBLE,
    pub FastIoRead: PFAST_IO_READ,
    pub FastIoWrite: PFAST_IO_WRITE,
    pub FastIoQueryBasicInfo: PFAST_IO_QUERY_BASIC_INFO,
    pub FastIoQueryStandardInfo: PFAST_IO_QUERY_STANDARD_INFO,
    pub FastIoLock: PFAST_IO_LOCK,
    pub FastIoUnlockSingle: PFAST_IO_UNLOCK_SINGLE,
    pub FastIoUnlockAll: PFAST_IO_UNLOCK_ALL,
    pub FastIoUnlockAllByKey: PFAST_IO_UNLOCK_ALL_BY_KEY,
    pub FastIoDeviceControl: PFAST_IO_DEVICE_CONTROL,
    pub AcquireFileForNtCreateSection: PFAST_IO_ACQUIRE_FILE,
    pub ReleaseFileForNtCreateSection: PFAST_IO_RELEASE_FILE,
    pub FastIoDetachDevice: PFAST_IO_DETACH_DEVICE,
    pub FastIoQueryNetworkOpenInfo: PFAST_IO_QUERY_NETWORK_OPEN_INFO,
    pub AcquireForModWrite: PFAST_IO_ACQUIRE_FOR_MOD_WRITE,
    pub MdlRead: PFAST_IO_MDL_READ,
    pub MdlReadComplete: PFAST_IO_MDL_READ_COMPLETE,
    pub PrepareMdlWrite: PFAST_IO_PREPARE_MDL_WRITE,
    pub MdlWriteComplete: PFAST_IO_MDL_WRITE_COMPLETE,
    pub FastIoReadCompressed: PFAST_IO_READ_COMPRESSED,
    pub FastIoWriteCompressed: PFAST_IO_WRITE_COMPRESSED,
    pub MdlReadCompleteCompressed: PFAST_IO_MDL_READ_COMPLETE_COMPRESSED,
    pub MdlWriteCompleteCompressed: PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED,
    pub FastIoQueryOpen: PFAST_IO_QUERY_OPEN,
    pub ReleaseForModWrite: PFAST_IO_RELEASE_FOR_MOD_WRITE,
    pub AcquireForCcFlush: PFAST_IO_ACQUIRE_FOR_CCFLUSH,
    pub ReleaseForCcFlush: PFAST_IO_RELEASE_FOR_CCFLUSH,
}
pub type PFAST_IO_DISPATCH = *mut _FAST_IO_DISPATCH;
impl _IO_ALLOCATION_ACTION {
    pub const KeepObject: _IO_ALLOCATION_ACTION = _IO_ALLOCATION_ACTION(1);
}
impl _IO_ALLOCATION_ACTION {
    pub const DeallocateObject: _IO_ALLOCATION_ACTION = _IO_ALLOCATION_ACTION(2);
}
impl _IO_ALLOCATION_ACTION {
    pub const DeallocateObjectKeepRegisters: _IO_ALLOCATION_ACTION = _IO_ALLOCATION_ACTION(
        3,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _IO_ALLOCATION_ACTION(pub ::libc::c_int);
pub use self::_IO_ALLOCATION_ACTION as IO_ALLOCATION_ACTION;
pub type DRIVER_CONTROL = ::core::option::Option<
    unsafe extern "C" fn(
        DeviceObject: *mut _DEVICE_OBJECT,
        Irp: *mut _IRP,
        MapRegisterBase: PVOID,
        Context: PVOID,
    ) -> IO_ALLOCATION_ACTION,
>;
pub type PDRIVER_CONTROL = DRIVER_CONTROL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_SECURITY_CONTEXT {
    pub SecurityQos: PSECURITY_QUALITY_OF_SERVICE,
    pub AccessState: PACCESS_STATE,
    pub DesiredAccess: ACCESS_MASK,
    pub FullCreateOptions: ULONG,
}
pub type PIO_SECURITY_CONTEXT = *mut _IO_SECURITY_CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VPB {
    pub Type: CSHORT,
    pub Size: CSHORT,
    pub Flags: USHORT,
    pub VolumeLabelLength: USHORT,
    pub DeviceObject: *mut _DEVICE_OBJECT,
    pub RealDevice: *mut _DEVICE_OBJECT,
    pub SerialNumber: ULONG,
    pub ReferenceCount: ULONG,
    pub VolumeLabel: [WCHAR; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WAIT_CONTEXT_BLOCK {
    pub __bindgen_anon_1: _WAIT_CONTEXT_BLOCK__bindgen_ty_1,
    pub DeviceRoutine: PDRIVER_CONTROL,
    pub DeviceContext: PVOID,
    pub NumberOfMapRegisters: ULONG,
    pub DeviceObject: PVOID,
    pub CurrentIrp: PVOID,
    pub BufferChainingDpc: PKDPC,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _WAIT_CONTEXT_BLOCK__bindgen_ty_1 {
    pub WaitQueueEntry: KDEVICE_QUEUE_ENTRY,
    pub __bindgen_anon_1: _WAIT_CONTEXT_BLOCK__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WAIT_CONTEXT_BLOCK__bindgen_ty_1__bindgen_ty_1 {
    pub DmaWaitEntry: LIST_ENTRY,
    pub NumberOfChannels: ULONG,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl _WAIT_CONTEXT_BLOCK__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn SyncCallback(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SyncCallback(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DmaContext(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DmaContext(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ZeroMapRegisters(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ZeroMapRegisters(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn NumberOfRemapPages(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_NumberOfRemapPages(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SyncCallback: ULONG,
        DmaContext: ULONG,
        ZeroMapRegisters: ULONG,
        Reserved: ULONG,
        NumberOfRemapPages: ULONG,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let SyncCallback: u32 = unsafe {
                        ::core::mem::transmute(SyncCallback)
                    };
                    SyncCallback as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let DmaContext: u32 = unsafe { ::core::mem::transmute(DmaContext) };
                    DmaContext as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                1u8,
                {
                    let ZeroMapRegisters: u32 = unsafe {
                        ::core::mem::transmute(ZeroMapRegisters)
                    };
                    ZeroMapRegisters as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                9u8,
                {
                    let Reserved: u32 = unsafe { ::core::mem::transmute(Reserved) };
                    Reserved as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                12usize,
                20u8,
                {
                    let NumberOfRemapPages: u32 = unsafe {
                        ::core::mem::transmute(NumberOfRemapPages)
                    };
                    NumberOfRemapPages as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type WAIT_CONTEXT_BLOCK = _WAIT_CONTEXT_BLOCK;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _DEVICE_OBJECT {
    pub Type: CSHORT,
    pub Size: USHORT,
    pub ReferenceCount: LONG,
    pub DriverObject: *mut _DRIVER_OBJECT,
    pub NextDevice: *mut _DEVICE_OBJECT,
    pub AttachedDevice: *mut _DEVICE_OBJECT,
    pub CurrentIrp: *mut _IRP,
    pub Timer: PIO_TIMER,
    pub Flags: ULONG,
    pub Characteristics: ULONG,
    pub Vpb: PVPB,
    pub DeviceExtension: PVOID,
    pub DeviceType: ULONG,
    pub StackSize: CCHAR,
    pub Queue: _DEVICE_OBJECT__bindgen_ty_1,
    pub AlignmentRequirement: ULONG,
    pub DeviceQueue: KDEVICE_QUEUE,
    pub Dpc: KDPC,
    pub ActiveThreadCount: ULONG,
    pub SecurityDescriptor: PSECURITY_DESCRIPTOR,
    pub DeviceLock: KEVENT,
    pub SectorSize: USHORT,
    pub Spare1: USHORT,
    pub DeviceObjectExtension: *mut _DEVOBJ_EXTENSION,
    pub Reserved: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DEVICE_OBJECT__bindgen_ty_1 {
    pub ListEntry: LIST_ENTRY,
    pub Wcb: WAIT_CONTEXT_BLOCK,
}
pub type PDEVICE_OBJECT = *mut _DEVICE_OBJECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEVICE_OBJECT_POWER_EXTENSION {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEVOBJ_EXTENSION {
    pub Type: CSHORT,
    pub Size: USHORT,
    pub DeviceObject: PDEVICE_OBJECT,
    pub PowerFlags: ULONG,
    pub Dope: *mut _DEVICE_OBJECT_POWER_EXTENSION,
    pub ExtensionFlags: ULONG,
    pub DeviceNode: PVOID,
    pub AttachedTo: PDEVICE_OBJECT,
    pub StartIoCount: LONG,
    pub StartIoKey: LONG,
    pub StartIoFlags: ULONG,
    pub Vpb: PVPB,
    pub DependencyNode: PVOID,
    pub InterruptContext: PVOID,
    pub InterruptCount: LONG,
    pub VerifierContext: PVOID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRIVER_EXTENSION {
    pub DriverObject: *mut _DRIVER_OBJECT,
    pub AddDevice: PDRIVER_ADD_DEVICE,
    pub Count: ULONG,
    pub ServiceKeyName: UNICODE_STRING,
}
pub type PDRIVER_EXTENSION = *mut _DRIVER_EXTENSION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRIVER_OBJECT {
    pub Type: CSHORT,
    pub Size: CSHORT,
    pub DeviceObject: PDEVICE_OBJECT,
    pub Flags: ULONG,
    pub DriverStart: PVOID,
    pub DriverSize: ULONG,
    pub DriverSection: PVOID,
    pub DriverExtension: PDRIVER_EXTENSION,
    pub DriverName: UNICODE_STRING,
    pub HardwareDatabase: PUNICODE_STRING,
    pub FastIoDispatch: PFAST_IO_DISPATCH,
    pub DriverInit: PDRIVER_INITIALIZE,
    pub DriverStartIo: PDRIVER_STARTIO,
    pub DriverUnload: PDRIVER_UNLOAD,
    pub MajorFunction: [PDRIVER_DISPATCH; 28usize],
}
pub type PDRIVER_OBJECT = *mut _DRIVER_OBJECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECTION_OBJECT_POINTERS {
    pub DataSectionObject: PVOID,
    pub SharedCacheMap: PVOID,
    pub ImageSectionObject: PVOID,
}
pub type SECTION_OBJECT_POINTERS = _SECTION_OBJECT_POINTERS;
pub type PSECTION_OBJECT_POINTERS = *mut SECTION_OBJECT_POINTERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_COMPLETION_CONTEXT {
    pub Port: PVOID,
    pub Key: PVOID,
    pub UsageCount: LONG_PTR,
}
pub type PIO_COMPLETION_CONTEXT = *mut _IO_COMPLETION_CONTEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_OBJECT {
    pub Type: CSHORT,
    pub Size: CSHORT,
    pub DeviceObject: PDEVICE_OBJECT,
    pub Vpb: PVPB,
    pub FsContext: PVOID,
    pub FsContext2: PVOID,
    pub SectionObjectPointer: PSECTION_OBJECT_POINTERS,
    pub PrivateCacheMap: PVOID,
    pub FinalStatus: NTSTATUS,
    pub RelatedFileObject: *mut _FILE_OBJECT,
    pub LockOperation: BOOLEAN,
    pub DeletePending: BOOLEAN,
    pub ReadAccess: BOOLEAN,
    pub WriteAccess: BOOLEAN,
    pub DeleteAccess: BOOLEAN,
    pub SharedRead: BOOLEAN,
    pub SharedWrite: BOOLEAN,
    pub SharedDelete: BOOLEAN,
    pub Flags: ULONG,
    pub FileName: UNICODE_STRING,
    pub CurrentByteOffset: LARGE_INTEGER,
    pub Waiters: ULONG,
    pub Busy: ULONG,
    pub LastLock: PVOID,
    pub Lock: KEVENT,
    pub Event: KEVENT,
    pub CompletionContext: PIO_COMPLETION_CONTEXT,
    pub IrpListLock: KSPIN_LOCK,
    pub IrpList: LIST_ENTRY,
    pub FileObjectExtension: *mut _IOP_FILE_OBJECT_EXTENSION,
}
pub type PFILE_OBJECT = *mut _FILE_OBJECT;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _IRP {
    pub Type: CSHORT,
    pub Size: USHORT,
    pub MdlAddress: PMDL,
    pub Flags: ULONG,
    pub AssociatedIrp: _IRP__bindgen_ty_1,
    pub ThreadListEntry: LIST_ENTRY,
    pub IoStatus: IO_STATUS_BLOCK,
    pub RequestorMode: KPROCESSOR_MODE,
    pub PendingReturned: BOOLEAN,
    pub StackCount: CHAR,
    pub CurrentLocation: CHAR,
    pub Cancel: BOOLEAN,
    pub CancelIrql: KIRQL,
    pub ApcEnvironment: CCHAR,
    pub AllocationFlags: UCHAR,
    pub __bindgen_anon_1: _IRP__bindgen_ty_2,
    pub UserEvent: PKEVENT,
    pub Overlay: _IRP__bindgen_ty_3,
    pub CancelRoutine: PDRIVER_CANCEL,
    pub UserBuffer: PVOID,
    pub Tail: _IRP__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_1 {
    pub MasterIrp: *mut _IRP,
    pub IrpCount: LONG,
    pub SystemBuffer: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_2 {
    pub UserIosb: PIO_STATUS_BLOCK,
    pub IoRingContext: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_3 {
    pub AsynchronousParameters: _IRP__bindgen_ty_3__bindgen_ty_1,
    pub AllocationSize: LARGE_INTEGER,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IRP__bindgen_ty_3__bindgen_ty_1 {
    pub __bindgen_anon_1: _IRP__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _IRP__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    pub UserApcRoutine: PIO_APC_ROUTINE,
    pub IssuingProcess: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2 {
    pub UserApcContext: PVOID,
    pub IoRing: *mut _IORING_OBJECT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_4 {
    pub Overlay: _IRP__bindgen_ty_4__bindgen_ty_1,
    pub Apc: KAPC,
    pub CompletionKey: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IRP__bindgen_ty_4__bindgen_ty_1 {
    pub __bindgen_anon_1: _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
    pub Thread: PETHREAD,
    pub AuxiliaryBuffer: PCHAR,
    pub __bindgen_anon_2: _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2,
    pub OriginalFileObject: PFILE_OBJECT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    pub DeviceQueueEntry: KDEVICE_QUEUE_ENTRY,
    pub __bindgen_anon_1: _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub DriverContext: [PVOID; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2 {
    pub ListEntry: LIST_ENTRY,
    pub __bindgen_anon_1: _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IRP__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub CurrentStackLocation: *mut _IO_STACK_LOCATION,
    pub PacketType: ULONG,
}
pub type IRP = _IRP;
pub type PIRP = *mut IRP;
pub type IO_COMPLETION_ROUTINE = ::core::option::Option<
    unsafe extern "C" fn(
        DeviceObject: PDEVICE_OBJECT,
        Irp: PIRP,
        Context: PVOID,
    ) -> NTSTATUS,
>;
pub type PIO_COMPLETION_ROUTINE = IO_COMPLETION_ROUTINE;
impl _DEVICE_RELATION_TYPE {
    pub const BusRelations: _DEVICE_RELATION_TYPE = _DEVICE_RELATION_TYPE(0);
}
impl _DEVICE_RELATION_TYPE {
    pub const EjectionRelations: _DEVICE_RELATION_TYPE = _DEVICE_RELATION_TYPE(1);
}
impl _DEVICE_RELATION_TYPE {
    pub const PowerRelations: _DEVICE_RELATION_TYPE = _DEVICE_RELATION_TYPE(2);
}
impl _DEVICE_RELATION_TYPE {
    pub const RemovalRelations: _DEVICE_RELATION_TYPE = _DEVICE_RELATION_TYPE(3);
}
impl _DEVICE_RELATION_TYPE {
    pub const TargetDeviceRelation: _DEVICE_RELATION_TYPE = _DEVICE_RELATION_TYPE(4);
}
impl _DEVICE_RELATION_TYPE {
    pub const SingleBusRelations: _DEVICE_RELATION_TYPE = _DEVICE_RELATION_TYPE(5);
}
impl _DEVICE_RELATION_TYPE {
    pub const TransportRelations: _DEVICE_RELATION_TYPE = _DEVICE_RELATION_TYPE(6);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _DEVICE_RELATION_TYPE(pub ::libc::c_int);
pub use self::_DEVICE_RELATION_TYPE as DEVICE_RELATION_TYPE;
impl _DEVICE_USAGE_NOTIFICATION_TYPE {
    pub const DeviceUsageTypeUndefined: _DEVICE_USAGE_NOTIFICATION_TYPE = _DEVICE_USAGE_NOTIFICATION_TYPE(
        0,
    );
}
impl _DEVICE_USAGE_NOTIFICATION_TYPE {
    pub const DeviceUsageTypePaging: _DEVICE_USAGE_NOTIFICATION_TYPE = _DEVICE_USAGE_NOTIFICATION_TYPE(
        1,
    );
}
impl _DEVICE_USAGE_NOTIFICATION_TYPE {
    pub const DeviceUsageTypeHibernation: _DEVICE_USAGE_NOTIFICATION_TYPE = _DEVICE_USAGE_NOTIFICATION_TYPE(
        2,
    );
}
impl _DEVICE_USAGE_NOTIFICATION_TYPE {
    pub const DeviceUsageTypeDumpFile: _DEVICE_USAGE_NOTIFICATION_TYPE = _DEVICE_USAGE_NOTIFICATION_TYPE(
        3,
    );
}
impl _DEVICE_USAGE_NOTIFICATION_TYPE {
    pub const DeviceUsageTypeBoot: _DEVICE_USAGE_NOTIFICATION_TYPE = _DEVICE_USAGE_NOTIFICATION_TYPE(
        4,
    );
}
impl _DEVICE_USAGE_NOTIFICATION_TYPE {
    pub const DeviceUsageTypePostDisplay: _DEVICE_USAGE_NOTIFICATION_TYPE = _DEVICE_USAGE_NOTIFICATION_TYPE(
        5,
    );
}
impl _DEVICE_USAGE_NOTIFICATION_TYPE {
    pub const DeviceUsageTypeGuestAssigned: _DEVICE_USAGE_NOTIFICATION_TYPE = _DEVICE_USAGE_NOTIFICATION_TYPE(
        6,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _DEVICE_USAGE_NOTIFICATION_TYPE(pub ::libc::c_int);
pub use self::_DEVICE_USAGE_NOTIFICATION_TYPE as DEVICE_USAGE_NOTIFICATION_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _INTERFACE {
    pub Size: USHORT,
    pub Version: USHORT,
    pub Context: PVOID,
    pub InterfaceReference: PINTERFACE_REFERENCE,
    pub InterfaceDereference: PINTERFACE_DEREFERENCE,
}
pub type PINTERFACE = *mut _INTERFACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEVICE_CAPABILITIES {
    pub Size: USHORT,
    pub Version: USHORT,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub Address: ULONG,
    pub UINumber: ULONG,
    pub DeviceState: [DEVICE_POWER_STATE; 7usize],
    pub SystemWake: SYSTEM_POWER_STATE,
    pub DeviceWake: DEVICE_POWER_STATE,
    pub D1Latency: ULONG,
    pub D2Latency: ULONG,
    pub D3Latency: ULONG,
}
impl _DEVICE_CAPABILITIES {
    #[inline]
    pub fn DeviceD1(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DeviceD1(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DeviceD2(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DeviceD2(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn LockSupported(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LockSupported(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn EjectSupported(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EjectSupported(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Removable(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Removable(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockDevice(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DockDevice(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn UniqueID(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_UniqueID(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SilentInstall(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SilentInstall(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn RawDeviceOK(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_RawDeviceOK(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SurpriseRemovalOK(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SurpriseRemovalOK(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WakeFromD0(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WakeFromD0(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WakeFromD1(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WakeFromD1(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WakeFromD2(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WakeFromD2(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WakeFromD3(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WakeFromD3(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HardwareDisabled(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_HardwareDisabled(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn NonDynamic(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NonDynamic(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WarmEjectSupported(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WarmEjectSupported(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn NoDisplayInUI(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NoDisplayInUI(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved1(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WakeFromInterrupt(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WakeFromInterrupt(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SecureDevice(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SecureDevice(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ChildOfVgaEnabledBridge(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ChildOfVgaEnabledBridge(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DecodeIoOnBoot(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DecodeIoOnBoot(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved(&self) -> ULONG {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        DeviceD1: ULONG,
        DeviceD2: ULONG,
        LockSupported: ULONG,
        EjectSupported: ULONG,
        Removable: ULONG,
        DockDevice: ULONG,
        UniqueID: ULONG,
        SilentInstall: ULONG,
        RawDeviceOK: ULONG,
        SurpriseRemovalOK: ULONG,
        WakeFromD0: ULONG,
        WakeFromD1: ULONG,
        WakeFromD2: ULONG,
        WakeFromD3: ULONG,
        HardwareDisabled: ULONG,
        NonDynamic: ULONG,
        WarmEjectSupported: ULONG,
        NoDisplayInUI: ULONG,
        Reserved1: ULONG,
        WakeFromInterrupt: ULONG,
        SecureDevice: ULONG,
        ChildOfVgaEnabledBridge: ULONG,
        DecodeIoOnBoot: ULONG,
        Reserved: ULONG,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let DeviceD1: u32 = unsafe { ::core::mem::transmute(DeviceD1) };
                    DeviceD1 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let DeviceD2: u32 = unsafe { ::core::mem::transmute(DeviceD2) };
                    DeviceD2 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                1u8,
                {
                    let LockSupported: u32 = unsafe {
                        ::core::mem::transmute(LockSupported)
                    };
                    LockSupported as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                1u8,
                {
                    let EjectSupported: u32 = unsafe {
                        ::core::mem::transmute(EjectSupported)
                    };
                    EjectSupported as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                4usize,
                1u8,
                {
                    let Removable: u32 = unsafe { ::core::mem::transmute(Removable) };
                    Removable as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                5usize,
                1u8,
                {
                    let DockDevice: u32 = unsafe { ::core::mem::transmute(DockDevice) };
                    DockDevice as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                6usize,
                1u8,
                {
                    let UniqueID: u32 = unsafe { ::core::mem::transmute(UniqueID) };
                    UniqueID as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                7usize,
                1u8,
                {
                    let SilentInstall: u32 = unsafe {
                        ::core::mem::transmute(SilentInstall)
                    };
                    SilentInstall as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                8usize,
                1u8,
                {
                    let RawDeviceOK: u32 = unsafe {
                        ::core::mem::transmute(RawDeviceOK)
                    };
                    RawDeviceOK as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                9usize,
                1u8,
                {
                    let SurpriseRemovalOK: u32 = unsafe {
                        ::core::mem::transmute(SurpriseRemovalOK)
                    };
                    SurpriseRemovalOK as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                10usize,
                1u8,
                {
                    let WakeFromD0: u32 = unsafe { ::core::mem::transmute(WakeFromD0) };
                    WakeFromD0 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                11usize,
                1u8,
                {
                    let WakeFromD1: u32 = unsafe { ::core::mem::transmute(WakeFromD1) };
                    WakeFromD1 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                12usize,
                1u8,
                {
                    let WakeFromD2: u32 = unsafe { ::core::mem::transmute(WakeFromD2) };
                    WakeFromD2 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                13usize,
                1u8,
                {
                    let WakeFromD3: u32 = unsafe { ::core::mem::transmute(WakeFromD3) };
                    WakeFromD3 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                14usize,
                1u8,
                {
                    let HardwareDisabled: u32 = unsafe {
                        ::core::mem::transmute(HardwareDisabled)
                    };
                    HardwareDisabled as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                15usize,
                1u8,
                {
                    let NonDynamic: u32 = unsafe { ::core::mem::transmute(NonDynamic) };
                    NonDynamic as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                16usize,
                1u8,
                {
                    let WarmEjectSupported: u32 = unsafe {
                        ::core::mem::transmute(WarmEjectSupported)
                    };
                    WarmEjectSupported as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                17usize,
                1u8,
                {
                    let NoDisplayInUI: u32 = unsafe {
                        ::core::mem::transmute(NoDisplayInUI)
                    };
                    NoDisplayInUI as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                18usize,
                1u8,
                {
                    let Reserved1: u32 = unsafe { ::core::mem::transmute(Reserved1) };
                    Reserved1 as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                19usize,
                1u8,
                {
                    let WakeFromInterrupt: u32 = unsafe {
                        ::core::mem::transmute(WakeFromInterrupt)
                    };
                    WakeFromInterrupt as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                20usize,
                1u8,
                {
                    let SecureDevice: u32 = unsafe {
                        ::core::mem::transmute(SecureDevice)
                    };
                    SecureDevice as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                21usize,
                1u8,
                {
                    let ChildOfVgaEnabledBridge: u32 = unsafe {
                        ::core::mem::transmute(ChildOfVgaEnabledBridge)
                    };
                    ChildOfVgaEnabledBridge as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                22usize,
                1u8,
                {
                    let DecodeIoOnBoot: u32 = unsafe {
                        ::core::mem::transmute(DecodeIoOnBoot)
                    };
                    DecodeIoOnBoot as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                23usize,
                9u8,
                {
                    let Reserved: u32 = unsafe { ::core::mem::transmute(Reserved) };
                    Reserved as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type PDEVICE_CAPABILITIES = *mut _DEVICE_CAPABILITIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SEQUENCE {
    pub SequenceD1: ULONG,
    pub SequenceD2: ULONG,
    pub SequenceD3: ULONG,
}
pub type PPOWER_SEQUENCE = *mut _POWER_SEQUENCE;
impl BUS_QUERY_ID_TYPE {
    pub const BusQueryDeviceID: BUS_QUERY_ID_TYPE = BUS_QUERY_ID_TYPE(0);
}
impl BUS_QUERY_ID_TYPE {
    pub const BusQueryHardwareIDs: BUS_QUERY_ID_TYPE = BUS_QUERY_ID_TYPE(1);
}
impl BUS_QUERY_ID_TYPE {
    pub const BusQueryCompatibleIDs: BUS_QUERY_ID_TYPE = BUS_QUERY_ID_TYPE(2);
}
impl BUS_QUERY_ID_TYPE {
    pub const BusQueryInstanceID: BUS_QUERY_ID_TYPE = BUS_QUERY_ID_TYPE(3);
}
impl BUS_QUERY_ID_TYPE {
    pub const BusQueryDeviceSerialNumber: BUS_QUERY_ID_TYPE = BUS_QUERY_ID_TYPE(4);
}
impl BUS_QUERY_ID_TYPE {
    pub const BusQueryContainerID: BUS_QUERY_ID_TYPE = BUS_QUERY_ID_TYPE(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BUS_QUERY_ID_TYPE(pub ::libc::c_int);
impl DEVICE_TEXT_TYPE {
    pub const DeviceTextDescription: DEVICE_TEXT_TYPE = DEVICE_TEXT_TYPE(0);
}
impl DEVICE_TEXT_TYPE {
    pub const DeviceTextLocationInformation: DEVICE_TEXT_TYPE = DEVICE_TEXT_TYPE(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DEVICE_TEXT_TYPE(pub ::libc::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_STACK_LOCATION {
    pub MajorFunction: UCHAR,
    pub MinorFunction: UCHAR,
    pub Flags: UCHAR,
    pub Control: UCHAR,
    pub Parameters: _IO_STACK_LOCATION__bindgen_ty_1,
    pub DeviceObject: PDEVICE_OBJECT,
    pub FileObject: PFILE_OBJECT,
    pub CompletionRoutine: PIO_COMPLETION_ROUTINE,
    pub Context: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IO_STACK_LOCATION__bindgen_ty_1 {
    pub Create: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_1,
    pub CreatePipe: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_2,
    pub CreateMailslot: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_3,
    pub Read: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_4,
    pub Write: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_5,
    pub QueryDirectory: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_6,
    pub NotifyDirectory: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_7,
    pub NotifyDirectoryEx: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_8,
    pub QueryFile: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_9,
    pub SetFile: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_10,
    pub QueryEa: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_11,
    pub SetEa: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_12,
    pub QueryVolume: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_13,
    pub SetVolume: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_14,
    pub FileSystemControl: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_15,
    pub LockControl: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_16,
    pub DeviceIoControl: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_17,
    pub QuerySecurity: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_18,
    pub SetSecurity: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_19,
    pub MountVolume: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_20,
    pub VerifyVolume: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_21,
    pub Scsi: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_22,
    pub QueryQuota: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_23,
    pub SetQuota: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_24,
    pub QueryDeviceRelations: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_25,
    pub QueryInterface: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_26,
    pub DeviceCapabilities: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_27,
    pub FilterResourceRequirements: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_28,
    pub ReadWriteConfig: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_29,
    pub SetLock: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_30,
    pub QueryId: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_31,
    pub QueryDeviceText: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_32,
    pub UsageNotification: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_33,
    pub WaitWake: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_34,
    pub PowerSequence: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_35,
    pub Power: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_36,
    pub StartDevice: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_37,
    pub WMI: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_38,
    pub Others: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_39,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_1 {
    pub SecurityContext: PIO_SECURITY_CONTEXT,
    pub Options: ULONG,
    pub __bindgen_padding_0: [u16; 2usize],
    pub FileAttributes: USHORT,
    pub ShareAccess: USHORT,
    pub __bindgen_padding_1: u32,
    pub EaLength: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_2 {
    pub SecurityContext: PIO_SECURITY_CONTEXT,
    pub Options: ULONG,
    pub __bindgen_padding_0: [u16; 2usize],
    pub Reserved: USHORT,
    pub ShareAccess: USHORT,
    pub Parameters: PNAMED_PIPE_CREATE_PARAMETERS,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_3 {
    pub SecurityContext: PIO_SECURITY_CONTEXT,
    pub Options: ULONG,
    pub __bindgen_padding_0: [u16; 2usize],
    pub Reserved: USHORT,
    pub ShareAccess: USHORT,
    pub Parameters: PMAILSLOT_CREATE_PARAMETERS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_4 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub Key: ULONG,
    pub Flags: ULONG,
    pub ByteOffset: LARGE_INTEGER,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_5 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub Key: ULONG,
    pub Flags: ULONG,
    pub ByteOffset: LARGE_INTEGER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_6 {
    pub Length: ULONG,
    pub FileName: PUNICODE_STRING,
    pub FileInformationClass: FILE_INFORMATION_CLASS,
    pub __bindgen_padding_0: u32,
    pub FileIndex: ULONG,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_7 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub CompletionFilter: ULONG,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_8 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub CompletionFilter: ULONG,
    pub __bindgen_padding_1: u32,
    pub DirectoryNotifyInformationClass: DIRECTORY_NOTIFY_INFORMATION_CLASS,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_9 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub FileInformationClass: FILE_INFORMATION_CLASS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_10 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub FileInformationClass: FILE_INFORMATION_CLASS,
    pub FileObject: PFILE_OBJECT,
    pub __bindgen_anon_1: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1 {
    pub __bindgen_anon_1: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1__bindgen_ty_1,
    pub ClusterCount: ULONG,
    pub DeleteHandle: HANDLE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_10__bindgen_ty_1__bindgen_ty_1 {
    pub ReplaceIfExists: BOOLEAN,
    pub AdvanceOnly: BOOLEAN,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_11 {
    pub Length: ULONG,
    pub EaList: PVOID,
    pub EaListLength: ULONG,
    pub __bindgen_padding_0: u32,
    pub EaIndex: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_12 {
    pub Length: ULONG,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_13 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub FsInformationClass: FS_INFORMATION_CLASS,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_14 {
    pub Length: ULONG,
    pub __bindgen_padding_0: u32,
    pub FsInformationClass: FS_INFORMATION_CLASS,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_15 {
    pub OutputBufferLength: ULONG,
    pub __bindgen_padding_0: u32,
    pub InputBufferLength: ULONG,
    pub __bindgen_padding_1: u32,
    pub FsControlCode: ULONG,
    pub Type3InputBuffer: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_16 {
    pub Length: PLARGE_INTEGER,
    pub Key: ULONG,
    pub ByteOffset: LARGE_INTEGER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_17 {
    pub OutputBufferLength: ULONG,
    pub __bindgen_padding_0: u32,
    pub InputBufferLength: ULONG,
    pub __bindgen_padding_1: u32,
    pub IoControlCode: ULONG,
    pub Type3InputBuffer: PVOID,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_18 {
    pub SecurityInformation: SECURITY_INFORMATION,
    pub __bindgen_padding_0: u32,
    pub Length: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_19 {
    pub SecurityInformation: SECURITY_INFORMATION,
    pub SecurityDescriptor: PSECURITY_DESCRIPTOR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_20 {
    pub Vpb: PVPB,
    pub DeviceObject: PDEVICE_OBJECT,
    pub OutputBufferLength: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_21 {
    pub Vpb: PVPB,
    pub DeviceObject: PDEVICE_OBJECT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_22 {
    pub Srb: *mut _SCSI_REQUEST_BLOCK,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_23 {
    pub Length: ULONG,
    pub StartSid: PSID,
    pub SidList: PFILE_GET_QUOTA_INFORMATION,
    pub SidListLength: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_24 {
    pub Length: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_25 {
    pub Type: DEVICE_RELATION_TYPE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_26 {
    pub InterfaceType: *const GUID,
    pub Size: USHORT,
    pub Version: USHORT,
    pub Interface: PINTERFACE,
    pub InterfaceSpecificData: PVOID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_27 {
    pub Capabilities: PDEVICE_CAPABILITIES,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_28 {
    pub IoResourceRequirementList: PIO_RESOURCE_REQUIREMENTS_LIST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_29 {
    pub WhichSpace: ULONG,
    pub Buffer: PVOID,
    pub Offset: ULONG,
    pub __bindgen_padding_0: u32,
    pub Length: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_30 {
    pub Lock: BOOLEAN,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_31 {
    pub IdType: BUS_QUERY_ID_TYPE,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_32 {
    pub DeviceTextType: DEVICE_TEXT_TYPE,
    pub __bindgen_padding_0: u32,
    pub LocaleId: LCID,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_33 {
    pub InPath: BOOLEAN,
    pub Reserved: [BOOLEAN; 3usize],
    pub __bindgen_padding_0: u32,
    pub Type: DEVICE_USAGE_NOTIFICATION_TYPE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_34 {
    pub PowerState: SYSTEM_POWER_STATE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_35 {
    pub PowerSequence: PPOWER_SEQUENCE,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_36 {
    pub __bindgen_anon_1: _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_36__bindgen_ty_1,
    pub __bindgen_padding_0: u32,
    pub Type: POWER_STATE_TYPE,
    pub __bindgen_padding_1: u32,
    pub State: POWER_STATE,
    pub __bindgen_padding_2: u32,
    pub ShutdownType: POWER_ACTION,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_36__bindgen_ty_1 {
    pub SystemContext: ULONG,
    pub SystemPowerStateContext: SYSTEM_POWER_STATE_CONTEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_37 {
    pub AllocatedResources: PCM_RESOURCE_LIST,
    pub AllocatedResourcesTranslated: PCM_RESOURCE_LIST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_38 {
    pub ProviderId: ULONG_PTR,
    pub DataPath: PVOID,
    pub BufferSize: ULONG,
    pub Buffer: PVOID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_STACK_LOCATION__bindgen_ty_1__bindgen_ty_39 {
    pub Argument1: PVOID,
    pub Argument2: PVOID,
    pub Argument3: PVOID,
    pub Argument4: PVOID,
}
impl _BUS_DATA_TYPE {
    pub const ConfigurationSpaceUndefined: _BUS_DATA_TYPE = _BUS_DATA_TYPE(-1);
}
impl _BUS_DATA_TYPE {
    pub const Cmos: _BUS_DATA_TYPE = _BUS_DATA_TYPE(0);
}
impl _BUS_DATA_TYPE {
    pub const EisaConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(1);
}
impl _BUS_DATA_TYPE {
    pub const Pos: _BUS_DATA_TYPE = _BUS_DATA_TYPE(2);
}
impl _BUS_DATA_TYPE {
    pub const CbusConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(3);
}
impl _BUS_DATA_TYPE {
    pub const PCIConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(4);
}
impl _BUS_DATA_TYPE {
    pub const VMEConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(5);
}
impl _BUS_DATA_TYPE {
    pub const NuBusConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(6);
}
impl _BUS_DATA_TYPE {
    pub const PCMCIAConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(7);
}
impl _BUS_DATA_TYPE {
    pub const MPIConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(8);
}
impl _BUS_DATA_TYPE {
    pub const MPSAConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(9);
}
impl _BUS_DATA_TYPE {
    pub const PNPISAConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(10);
}
impl _BUS_DATA_TYPE {
    pub const SgiInternalConfiguration: _BUS_DATA_TYPE = _BUS_DATA_TYPE(11);
}
impl _BUS_DATA_TYPE {
    pub const MaximumBusDataType: _BUS_DATA_TYPE = _BUS_DATA_TYPE(12);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _BUS_DATA_TYPE(pub ::libc::c_int);
pub use self::_BUS_DATA_TYPE as BUS_DATA_TYPE;
extern "C" {
    pub fn SeSinglePrivilegeCheck(
        PrivilegeValue: LUID,
        PreviousMode: KPROCESSOR_MODE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HalGetBusDataByOffset(
        BusDataType: BUS_DATA_TYPE,
        BusNumber: ULONG,
        SlotNumber: ULONG,
        Buffer: PVOID,
        Offset: ULONG,
        Length: ULONG,
    ) -> ULONG;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID_IDENTIFIER_AUTHORITY {
    pub Value: [UCHAR; 6usize],
}
pub type SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID {
    pub Revision: UCHAR,
    pub SubAuthorityCount: UCHAR,
    pub IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
    pub SubAuthority: [ULONG; 1usize],
}
pub type SID = _SID;
pub type SECURITY_DESCRIPTOR_CONTROL = USHORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_DESCRIPTOR {
    pub Revision: UCHAR,
    pub Sbz1: UCHAR,
    pub Control: SECURITY_DESCRIPTOR_CONTROL,
    pub Owner: PSID,
    pub Group: PSID,
    pub Sacl: PACL,
    pub Dacl: PACL,
}
pub type SECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_GET_QUOTA_INFORMATION {
    pub NextEntryOffset: ULONG,
    pub SidLength: ULONG,
    pub Sid: SID,
}
extern "C" {
    pub static FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE: GUID;
}
extern "C" {
    pub static FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE: GUID;
}
extern "C" {
    pub static FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE: GUID;
}
pub type WDFFUNC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut WdfFunctions_01015: *const WDFFUNC;
}
impl _WDF_TRI_STATE {
    pub const WdfFalse: _WDF_TRI_STATE = _WDF_TRI_STATE(0);
}
impl _WDF_TRI_STATE {
    pub const WdfTrue: _WDF_TRI_STATE = _WDF_TRI_STATE(1);
}
impl _WDF_TRI_STATE {
    pub const WdfUseDefault: _WDF_TRI_STATE = _WDF_TRI_STATE(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDF_TRI_STATE(pub ::libc::c_int);
pub use self::_WDF_TRI_STATE as WDF_TRI_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WDFDEVICE_INIT {
    _unused: [u8; 0],
}
pub type PWDFDEVICE_INIT = *mut WDFDEVICE_INIT;
pub type PWDF_OBJECT_ATTRIBUTES = *mut _WDF_OBJECT_ATTRIBUTES;
pub type WDFOBJECT = HANDLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WDFDRIVER__ {
    pub unused: ::libc::c_int,
}
pub type WDFDRIVER = *mut WDFDRIVER__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WDFDEVICE__ {
    pub unused: ::libc::c_int,
}
pub type WDFDEVICE = *mut WDFDEVICE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WDFQUEUE__ {
    pub unused: ::libc::c_int,
}
pub type WDFQUEUE = *mut WDFQUEUE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WDFREQUEST__ {
    pub unused: ::libc::c_int,
}
pub type WDFREQUEST = *mut WDFREQUEST__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WDFFILEOBJECT__ {
    pub unused: ::libc::c_int,
}
pub type WDFFILEOBJECT = *mut WDFFILEOBJECT__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WDF_DRIVER_GLOBALS {
    pub Driver: WDFDRIVER,
    pub DriverFlags: ULONG,
    pub DriverTag: ULONG,
    pub DriverName: [CHAR; 32usize],
    pub DisplaceDriverUnload: BOOLEAN,
}
pub type PWDF_DRIVER_GLOBALS = *mut _WDF_DRIVER_GLOBALS;
extern "C" {
    pub static mut WdfDriverGlobals: PWDF_DRIVER_GLOBALS;
}
impl _WDFFUNCENUM {
    pub const WdfChildListCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(0);
}
impl _WDFFUNCENUM {
    pub const WdfChildListGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(1);
}
impl _WDFFUNCENUM {
    pub const WdfChildListRetrievePdoTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(2);
}
impl _WDFFUNCENUM {
    pub const WdfChildListRetrieveAddressDescriptionTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        3,
    );
}
impl _WDFFUNCENUM {
    pub const WdfChildListBeginScanTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(4);
}
impl _WDFFUNCENUM {
    pub const WdfChildListEndScanTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(5);
}
impl _WDFFUNCENUM {
    pub const WdfChildListBeginIterationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(6);
}
impl _WDFFUNCENUM {
    pub const WdfChildListRetrieveNextDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(7);
}
impl _WDFFUNCENUM {
    pub const WdfChildListEndIterationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(8);
}
impl _WDFFUNCENUM {
    pub const WdfChildListAddOrUpdateChildDescriptionAsPresentTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        9,
    );
}
impl _WDFFUNCENUM {
    pub const WdfChildListUpdateChildDescriptionAsMissingTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        10,
    );
}
impl _WDFFUNCENUM {
    pub const WdfChildListUpdateAllChildDescriptionsAsPresentTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        11,
    );
}
impl _WDFFUNCENUM {
    pub const WdfChildListRequestChildEjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(12);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(13);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionGetCountTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(14);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionAddTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(15);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionRemoveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(16);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionRemoveItemTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(17);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionGetItemTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(18);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionGetFirstItemTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(19);
}
impl _WDFFUNCENUM {
    pub const WdfCollectionGetLastItemTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(20);
}
impl _WDFFUNCENUM {
    pub const WdfCommonBufferCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(21);
}
impl _WDFFUNCENUM {
    pub const WdfCommonBufferGetAlignedVirtualAddressTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        22,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCommonBufferGetAlignedLogicalAddressTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        23,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCommonBufferGetLengthTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(24);
}
impl _WDFFUNCENUM {
    pub const WdfControlDeviceInitAllocateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(25);
}
impl _WDFFUNCENUM {
    pub const WdfControlDeviceInitSetShutdownNotificationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        26,
    );
}
impl _WDFFUNCENUM {
    pub const WdfControlFinishInitializingTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(27);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetDeviceStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(28);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetDeviceStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(29);
}
impl _WDFFUNCENUM {
    pub const WdfWdmDeviceGetWdfDeviceHandleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(30);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceWdmGetDeviceObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(31);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceWdmGetAttachedDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(32);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceWdmGetPhysicalDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(33);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceWdmDispatchPreprocessedIrpTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        34,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAddDependentUsageDeviceObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        35,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAddRemovalRelationsPhysicalDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        36,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceRemoveRemovalRelationsPhysicalDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        37,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceClearRemovalRelationsDevicesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        38,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetDriverTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(39);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceRetrieveDeviceNameTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(40);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAssignMofResourceNameTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(41);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetIoTargetTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(42);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetDevicePnpStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(43);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetDevicePowerStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(44);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetDevicePowerPolicyStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        45,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAssignS0IdleSettingsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(46);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAssignSxWakeSettingsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(47);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceOpenRegistryKeyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(48);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetSpecialFileSupportTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(49);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetCharacteristicsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(50);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetCharacteristicsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(51);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetAlignmentRequirementTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        52,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetAlignmentRequirementTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        53,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitFreeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(54);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetPnpPowerEventCallbacksTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        55,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetPowerPolicyEventCallbacksTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        56,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetPowerPolicyOwnershipTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        57,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitRegisterPnpStateChangeCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        58,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitRegisterPowerStateChangeCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        59,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitRegisterPowerPolicyStateChangeCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        60,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetIoTypeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(61);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetExclusiveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(62);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetPowerNotPageableTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        63,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetPowerPageableTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(64);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetPowerInrushTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(65);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetDeviceTypeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(66);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitAssignNameTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(67);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitAssignSDDLStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(68);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetDeviceClassTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(69);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetCharacteristicsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(70);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetFileObjectConfigTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        71,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetRequestAttributesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        72,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitAssignWdmIrpPreprocessCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        73,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetIoInCallerContextCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        74,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(75);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetStaticStopRemoveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(76);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceCreateDeviceInterfaceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(77);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetDeviceInterfaceStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        78,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceRetrieveDeviceInterfaceStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        79,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceCreateSymbolicLinkTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(80);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceQueryPropertyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(81);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAllocAndQueryPropertyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(82);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetPnpCapabilitiesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(83);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetPowerCapabilitiesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(84);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetBusInformationForChildrenTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        85,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceIndicateWakeStatusTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(86);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceSetFailedTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(87);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceStopIdleNoTrackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(88);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceResumeIdleNoTrackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(89);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetFileObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(90);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceEnqueueRequestTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(91);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetDefaultQueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(92);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceConfigureRequestDispatchingTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        93,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaEnablerCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(94);
}
impl _WDFFUNCENUM {
    pub const WdfDmaEnablerGetMaximumLengthTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(95);
}
impl _WDFFUNCENUM {
    pub const WdfDmaEnablerGetMaximumScatterGatherElementsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        96,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaEnablerSetMaximumScatterGatherElementsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        97,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(98);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionInitializeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(99);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionInitializeUsingRequestTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        100,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionExecuteTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(101);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionReleaseTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(102);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionDmaCompletedTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(103);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionDmaCompletedWithLengthTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        104,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionDmaCompletedFinalTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        105,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionGetBytesTransferredTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        106,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionSetMaximumLengthTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        107,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionGetRequestTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(108);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionGetCurrentDmaTransferLengthTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        109,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(110);
}
impl _WDFFUNCENUM {
    pub const WdfDpcCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(111);
}
impl _WDFFUNCENUM {
    pub const WdfDpcEnqueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(112);
}
impl _WDFFUNCENUM {
    pub const WdfDpcCancelTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(113);
}
impl _WDFFUNCENUM {
    pub const WdfDpcGetParentObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(114);
}
impl _WDFFUNCENUM {
    pub const WdfDpcWdmGetDpcTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(115);
}
impl _WDFFUNCENUM {
    pub const WdfDriverCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(116);
}
impl _WDFFUNCENUM {
    pub const WdfDriverGetRegistryPathTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(117);
}
impl _WDFFUNCENUM {
    pub const WdfDriverWdmGetDriverObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(118);
}
impl _WDFFUNCENUM {
    pub const WdfDriverOpenParametersRegistryKeyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        119,
    );
}
impl _WDFFUNCENUM {
    pub const WdfWdmDriverGetWdfDriverHandleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(120);
}
impl _WDFFUNCENUM {
    pub const WdfDriverRegisterTraceInfoTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(121);
}
impl _WDFFUNCENUM {
    pub const WdfDriverRetrieveVersionStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(122);
}
impl _WDFFUNCENUM {
    pub const WdfDriverIsVersionAvailableTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(123);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitWdmGetPhysicalDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(124);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitOpenRegistryKeyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(125);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitQueryPropertyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(126);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitAllocAndQueryPropertyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        127,
    );
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitSetEventCallbacksTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(128);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitSetFilterTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(129);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitSetDefaultChildListConfigTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        130,
    );
}
impl _WDFFUNCENUM {
    pub const WdfFdoQueryForInterfaceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(131);
}
impl _WDFFUNCENUM {
    pub const WdfFdoGetDefaultChildListTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(132);
}
impl _WDFFUNCENUM {
    pub const WdfFdoAddStaticChildTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(133);
}
impl _WDFFUNCENUM {
    pub const WdfFdoLockStaticChildListForIterationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        134,
    );
}
impl _WDFFUNCENUM {
    pub const WdfFdoRetrieveNextStaticChildTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(135);
}
impl _WDFFUNCENUM {
    pub const WdfFdoUnlockStaticChildListFromIterationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        136,
    );
}
impl _WDFFUNCENUM {
    pub const WdfFileObjectGetFileNameTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(137);
}
impl _WDFFUNCENUM {
    pub const WdfFileObjectGetFlagsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(138);
}
impl _WDFFUNCENUM {
    pub const WdfFileObjectGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(139);
}
impl _WDFFUNCENUM {
    pub const WdfFileObjectWdmGetFileObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(140);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(141);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptQueueDpcForIsrTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(142);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptSynchronizeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(143);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptAcquireLockTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(144);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptReleaseLockTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(145);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptEnableTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(146);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptDisableTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(147);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptWdmGetInterruptTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(148);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptGetInfoTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(149);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptSetPolicyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(150);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(151);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(152);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueGetStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(153);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueStartTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(154);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueStopTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(155);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueStopSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(156);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(157);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueRetrieveNextRequestTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(158);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueRetrieveRequestByFileObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        159,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueFindRequestTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(160);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueRetrieveFoundRequestTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(161);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueDrainSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(162);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueDrainTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(163);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueuePurgeSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(164);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueuePurgeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(165);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueReadyNotifyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(166);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(167);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetOpenTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(168);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetCloseForQueryRemoveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(169);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetCloseTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(170);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetStartTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(171);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetStopTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(172);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetGetStateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(173);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(174);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetQueryTargetPropertyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(175);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetAllocAndQueryTargetPropertyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        176,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetQueryForInterfaceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(177);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetWdmGetTargetDeviceObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        178,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetWdmGetTargetPhysicalDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        179,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetWdmGetTargetFileObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        180,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetWdmGetTargetFileHandleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        181,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetSendReadSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        182,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetFormatRequestForReadTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        183,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetSendWriteSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        184,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetFormatRequestForWriteTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        185,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetSendIoctlSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        186,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetFormatRequestForIoctlTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        187,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetSendInternalIoctlSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        188,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetFormatRequestForInternalIoctlTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        189,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetSendInternalIoctlOthersSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        190,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetFormatRequestForInternalIoctlOthersTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        191,
    );
}
impl _WDFFUNCENUM {
    pub const WdfMemoryCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(192);
}
impl _WDFFUNCENUM {
    pub const WdfMemoryCreatePreallocatedTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(193);
}
impl _WDFFUNCENUM {
    pub const WdfMemoryGetBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(194);
}
impl _WDFFUNCENUM {
    pub const WdfMemoryAssignBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(195);
}
impl _WDFFUNCENUM {
    pub const WdfMemoryCopyToBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(196);
}
impl _WDFFUNCENUM {
    pub const WdfMemoryCopyFromBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(197);
}
impl _WDFFUNCENUM {
    pub const WdfLookasideListCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(198);
}
impl _WDFFUNCENUM {
    pub const WdfMemoryCreateFromLookasideTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(199);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceMiniportCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(200);
}
impl _WDFFUNCENUM {
    pub const WdfDriverMiniportUnloadTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(201);
}
impl _WDFFUNCENUM {
    pub const WdfObjectGetTypedContextWorkerTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(202);
}
impl _WDFFUNCENUM {
    pub const WdfObjectAllocateContextTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(203);
}
impl _WDFFUNCENUM {
    pub const WdfObjectContextGetObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(204);
}
impl _WDFFUNCENUM {
    pub const WdfObjectReferenceActualTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(205);
}
impl _WDFFUNCENUM {
    pub const WdfObjectDereferenceActualTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(206);
}
impl _WDFFUNCENUM {
    pub const WdfObjectCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(207);
}
impl _WDFFUNCENUM {
    pub const WdfObjectDeleteTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(208);
}
impl _WDFFUNCENUM {
    pub const WdfObjectQueryTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(209);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAllocateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(210);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitSetEventCallbacksTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(211);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAssignDeviceIDTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(212);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAssignInstanceIDTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(213);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAddHardwareIDTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(214);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAddCompatibleIDTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(215);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAddDeviceTextTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(216);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitSetDefaultLocaleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(217);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAssignRawDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(218);
}
impl _WDFFUNCENUM {
    pub const WdfPdoMarkMissingTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(219);
}
impl _WDFFUNCENUM {
    pub const WdfPdoRequestEjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(220);
}
impl _WDFFUNCENUM {
    pub const WdfPdoGetParentTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(221);
}
impl _WDFFUNCENUM {
    pub const WdfPdoRetrieveIdentificationDescriptionTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        222,
    );
}
impl _WDFFUNCENUM {
    pub const WdfPdoRetrieveAddressDescriptionTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        223,
    );
}
impl _WDFFUNCENUM {
    pub const WdfPdoUpdateAddressDescriptionTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(224);
}
impl _WDFFUNCENUM {
    pub const WdfPdoAddEjectionRelationsPhysicalDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        225,
    );
}
impl _WDFFUNCENUM {
    pub const WdfPdoRemoveEjectionRelationsPhysicalDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        226,
    );
}
impl _WDFFUNCENUM {
    pub const WdfPdoClearEjectionRelationsDevicesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        227,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAddQueryInterfaceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(228);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryOpenKeyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(229);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryCreateKeyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(230);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryCloseTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(231);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryWdmGetHandleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(232);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryRemoveKeyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(233);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryRemoveValueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(234);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryQueryValueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(235);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryQueryMemoryTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(236);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryQueryMultiStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(237);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryQueryUnicodeStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(238);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryQueryStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(239);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryQueryULongTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(240);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryAssignValueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(241);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryAssignMemoryTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(242);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryAssignMultiStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(243);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryAssignUnicodeStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(244);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryAssignStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(245);
}
impl _WDFFUNCENUM {
    pub const WdfRegistryAssignULongTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(246);
}
impl _WDFFUNCENUM {
    pub const WdfRequestCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(247);
}
impl _WDFFUNCENUM {
    pub const WdfRequestCreateFromIrpTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(248);
}
impl _WDFFUNCENUM {
    pub const WdfRequestReuseTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(249);
}
impl _WDFFUNCENUM {
    pub const WdfRequestChangeTargetTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(250);
}
impl _WDFFUNCENUM {
    pub const WdfRequestFormatRequestUsingCurrentTypeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        251,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestWdmFormatUsingStackLocationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        252,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestSendTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(253);
}
impl _WDFFUNCENUM {
    pub const WdfRequestGetStatusTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(254);
}
impl _WDFFUNCENUM {
    pub const WdfRequestMarkCancelableTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(255);
}
impl _WDFFUNCENUM {
    pub const WdfRequestUnmarkCancelableTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(256);
}
impl _WDFFUNCENUM {
    pub const WdfRequestIsCanceledTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(257);
}
impl _WDFFUNCENUM {
    pub const WdfRequestCancelSentRequestTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(258);
}
impl _WDFFUNCENUM {
    pub const WdfRequestIsFrom32BitProcessTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(259);
}
impl _WDFFUNCENUM {
    pub const WdfRequestSetCompletionRoutineTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(260);
}
impl _WDFFUNCENUM {
    pub const WdfRequestGetCompletionParamsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(261);
}
impl _WDFFUNCENUM {
    pub const WdfRequestAllocateTimerTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(262);
}
impl _WDFFUNCENUM {
    pub const WdfRequestCompleteTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(263);
}
impl _WDFFUNCENUM {
    pub const WdfRequestCompleteWithPriorityBoostTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        264,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestCompleteWithInformationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        265,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestGetParametersTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(266);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveInputMemoryTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(267);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveOutputMemoryTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(268);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveInputBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(269);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveOutputBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(270);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveInputWdmMdlTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(271);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveOutputWdmMdlTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(272);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveUnsafeUserInputBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        273,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestRetrieveUnsafeUserOutputBufferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        274,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestSetInformationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(275);
}
impl _WDFFUNCENUM {
    pub const WdfRequestGetInformationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(276);
}
impl _WDFFUNCENUM {
    pub const WdfRequestGetFileObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(277);
}
impl _WDFFUNCENUM {
    pub const WdfRequestProbeAndLockUserBufferForReadTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        278,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestProbeAndLockUserBufferForWriteTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        279,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestGetRequestorModeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(280);
}
impl _WDFFUNCENUM {
    pub const WdfRequestForwardToIoQueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(281);
}
impl _WDFFUNCENUM {
    pub const WdfRequestGetIoQueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(282);
}
impl _WDFFUNCENUM {
    pub const WdfRequestRequeueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(283);
}
impl _WDFFUNCENUM {
    pub const WdfRequestStopAcknowledgeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(284);
}
impl _WDFFUNCENUM {
    pub const WdfRequestWdmGetIrpTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(285);
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListSetSlotNumberTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        286,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListSetInterfaceTypeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        287,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListAppendIoResListTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        288,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListInsertIoResListTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        289,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListGetCountTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        290,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListGetIoResListTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        291,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListRemoveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        292,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceRequirementsListRemoveByIoResListTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        293,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(294);
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListAppendDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        295,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListInsertDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        296,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListUpdateDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        297,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListGetCountTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(298);
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListGetDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(299);
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListRemoveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(300);
}
impl _WDFFUNCENUM {
    pub const WdfIoResourceListRemoveByDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        301,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCmResourceListAppendDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        302,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCmResourceListInsertDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        303,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCmResourceListGetCountTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(304);
}
impl _WDFFUNCENUM {
    pub const WdfCmResourceListGetDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(305);
}
impl _WDFFUNCENUM {
    pub const WdfCmResourceListRemoveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(306);
}
impl _WDFFUNCENUM {
    pub const WdfCmResourceListRemoveByDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        307,
    );
}
impl _WDFFUNCENUM {
    pub const WdfStringCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(308);
}
impl _WDFFUNCENUM {
    pub const WdfStringGetUnicodeStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(309);
}
impl _WDFFUNCENUM {
    pub const WdfObjectAcquireLockTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(310);
}
impl _WDFFUNCENUM {
    pub const WdfObjectReleaseLockTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(311);
}
impl _WDFFUNCENUM {
    pub const WdfWaitLockCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(312);
}
impl _WDFFUNCENUM {
    pub const WdfWaitLockAcquireTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(313);
}
impl _WDFFUNCENUM {
    pub const WdfWaitLockReleaseTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(314);
}
impl _WDFFUNCENUM {
    pub const WdfSpinLockCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(315);
}
impl _WDFFUNCENUM {
    pub const WdfSpinLockAcquireTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(316);
}
impl _WDFFUNCENUM {
    pub const WdfSpinLockReleaseTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(317);
}
impl _WDFFUNCENUM {
    pub const WdfTimerCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(318);
}
impl _WDFFUNCENUM {
    pub const WdfTimerStartTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(319);
}
impl _WDFFUNCENUM {
    pub const WdfTimerStopTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(320);
}
impl _WDFFUNCENUM {
    pub const WdfTimerGetParentObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(321);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(322);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceRetrieveInformationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        323,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceGetDeviceDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        324,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceRetrieveConfigDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        325,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceQueryStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(326);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceAllocAndQueryStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        327,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceFormatRequestForStringTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        328,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceGetNumInterfacesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        329,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceSelectConfigTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(330);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceWdmGetConfigurationHandleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        331,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceRetrieveCurrentFrameNumberTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        332,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceSendControlTransferSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        333,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceFormatRequestForControlTransferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        334,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceIsConnectedSynchronousTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        335,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceResetPortSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        336,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceCyclePortSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        337,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceFormatRequestForCyclePortTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        338,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceSendUrbSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        339,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceFormatRequestForUrbTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        340,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeGetInformationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(341);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeIsInEndpointTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(342);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeIsOutEndpointTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(343);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeGetTypeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(344);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeSetNoMaximumPacketSizeCheckTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        345,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeWriteSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        346,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeFormatRequestForWriteTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        347,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeReadSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        348,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeFormatRequestForReadTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        349,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeConfigContinuousReaderTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        350,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeAbortSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        351,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeFormatRequestForAbortTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        352,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeResetSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        353,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeFormatRequestForResetTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        354,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeSendUrbSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        355,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeFormatRequestForUrbTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        356,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetInterfaceNumberTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        357,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetNumEndpointsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(358);
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetDescriptorTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(359);
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceSelectSettingTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(360);
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetEndpointInformationTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        361,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceGetInterfaceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(362);
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetConfiguredSettingIndexTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        363,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetNumConfiguredPipesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        364,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetConfiguredPipeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        365,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetPipeWdmGetPipeHandleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        366,
    );
}
impl _WDFFUNCENUM {
    pub const WdfVerifierDbgBreakPointTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(367);
}
impl _WDFFUNCENUM {
    pub const WdfVerifierKeBugCheckTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(368);
}
impl _WDFFUNCENUM {
    pub const WdfWmiProviderCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(369);
}
impl _WDFFUNCENUM {
    pub const WdfWmiProviderGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(370);
}
impl _WDFFUNCENUM {
    pub const WdfWmiProviderIsEnabledTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(371);
}
impl _WDFFUNCENUM {
    pub const WdfWmiProviderGetTracingHandleTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(372);
}
impl _WDFFUNCENUM {
    pub const WdfWmiInstanceCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(373);
}
impl _WDFFUNCENUM {
    pub const WdfWmiInstanceRegisterTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(374);
}
impl _WDFFUNCENUM {
    pub const WdfWmiInstanceDeregisterTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(375);
}
impl _WDFFUNCENUM {
    pub const WdfWmiInstanceGetDeviceTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(376);
}
impl _WDFFUNCENUM {
    pub const WdfWmiInstanceGetProviderTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(377);
}
impl _WDFFUNCENUM {
    pub const WdfWmiInstanceFireEventTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(378);
}
impl _WDFFUNCENUM {
    pub const WdfWorkItemCreateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(379);
}
impl _WDFFUNCENUM {
    pub const WdfWorkItemEnqueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(380);
}
impl _WDFFUNCENUM {
    pub const WdfWorkItemGetParentObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(381);
}
impl _WDFFUNCENUM {
    pub const WdfWorkItemFlushTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(382);
}
impl _WDFFUNCENUM {
    pub const WdfCommonBufferCreateWithConfigTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        383,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaEnablerGetFragmentLengthTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(384);
}
impl _WDFFUNCENUM {
    pub const WdfDmaEnablerWdmGetDmaAdapterTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(385);
}
impl _WDFFUNCENUM {
    pub const WdfUsbInterfaceGetNumSettingsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(386);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceRemoveDependentUsageDeviceObjectTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        387,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetSystemPowerActionTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(388);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptSetExtendedPolicyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(389);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueAssignForwardProgressPolicyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        390,
    );
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAssignContainerIDTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(391);
}
impl _WDFFUNCENUM {
    pub const WdfPdoInitAllowForwardingRequestToParentTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        392,
    );
}
impl _WDFFUNCENUM {
    pub const WdfRequestMarkCancelableExTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(393);
}
impl _WDFFUNCENUM {
    pub const WdfRequestIsReservedTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(394);
}
impl _WDFFUNCENUM {
    pub const WdfRequestForwardToParentDeviceIoQueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        395,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCxDeviceInitAllocateTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(396);
}
impl _WDFFUNCENUM {
    pub const WdfCxDeviceInitAssignWdmIrpPreprocessCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        397,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCxDeviceInitSetIoInCallerContextCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        398,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCxDeviceInitSetRequestAttributesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        399,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCxDeviceInitSetFileObjectConfigTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        400,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceWdmDispatchIrpTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(401);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceWdmDispatchIrpToIoQueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        402,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetRemoveLockOptionsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        403,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceConfigureWdmIrpDispatchCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        404,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaEnablerConfigureSystemProfileTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        405,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionInitializeUsingOffsetTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        406,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionGetTransferInfoTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        407,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionSetChannelConfigurationCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        408,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionSetTransferCompleteCallbackTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        409,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionSetImmediateExecutionTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        410,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionAllocateResourcesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        411,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionSetDeviceAddressOffsetTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        412,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionFreeResourcesTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(413);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionCancelTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(414);
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionWdmGetTransferContextTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        415,
    );
}
impl _WDFFUNCENUM {
    pub const WdfInterruptQueueWorkItemForIsrTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        416,
    );
}
impl _WDFFUNCENUM {
    pub const WdfInterruptTryToAcquireLockTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(417);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueStopAndPurgeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(418);
}
impl _WDFFUNCENUM {
    pub const WdfIoQueueStopAndPurgeSynchronouslyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        419,
    );
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetPurgeTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(420);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceCreateWithParametersTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        421,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceQueryUsbCapabilityTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        422,
    );
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceCreateUrbTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(423);
}
impl _WDFFUNCENUM {
    pub const WdfUsbTargetDeviceCreateIsochUrbTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        424,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceWdmAssignPowerFrameworkSettingsTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        425,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDmaTransactionStopSystemTransferTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        426,
    );
}
impl _WDFFUNCENUM {
    pub const WdfCxVerifierKeBugCheckTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(427);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptReportActiveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(428);
}
impl _WDFFUNCENUM {
    pub const WdfInterruptReportInactiveTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(429);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetReleaseHardwareOrderOnFailureTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        430,
    );
}
impl _WDFFUNCENUM {
    pub const WdfGetTriageInfoTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(431);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitSetIoTypeExTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(432);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceQueryPropertyExTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(433);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAllocAndQueryPropertyExTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        434,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceAssignPropertyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(435);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitQueryPropertyExTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(436);
}
impl _WDFFUNCENUM {
    pub const WdfFdoInitAllocAndQueryPropertyExTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        437,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceStopIdleActualTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(438);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceResumeIdleActualTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(439);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceGetSelfIoTargetTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(440);
}
impl _WDFFUNCENUM {
    pub const WdfDeviceInitAllowSelfIoTargetTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(441);
}
impl _WDFFUNCENUM {
    pub const WdfIoTargetSelfAssignDefaultIoQueueTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(
        442,
    );
}
impl _WDFFUNCENUM {
    pub const WdfDeviceOpenDevicemapKeyTableIndex: _WDFFUNCENUM = _WDFFUNCENUM(443);
}
impl _WDFFUNCENUM {
    pub const WdfFunctionTableNumEntries: _WDFFUNCENUM = _WDFFUNCENUM(444);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDFFUNCENUM(pub ::libc::c_int);
pub use self::_WDFFUNCENUM as WDFFUNCENUM;
impl _WDF_EXECUTION_LEVEL {
    pub const WdfExecutionLevelInvalid: _WDF_EXECUTION_LEVEL = _WDF_EXECUTION_LEVEL(0);
}
impl _WDF_EXECUTION_LEVEL {
    pub const WdfExecutionLevelInheritFromParent: _WDF_EXECUTION_LEVEL = _WDF_EXECUTION_LEVEL(
        1,
    );
}
impl _WDF_EXECUTION_LEVEL {
    pub const WdfExecutionLevelPassive: _WDF_EXECUTION_LEVEL = _WDF_EXECUTION_LEVEL(2);
}
impl _WDF_EXECUTION_LEVEL {
    pub const WdfExecutionLevelDispatch: _WDF_EXECUTION_LEVEL = _WDF_EXECUTION_LEVEL(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDF_EXECUTION_LEVEL(pub ::libc::c_int);
pub use self::_WDF_EXECUTION_LEVEL as WDF_EXECUTION_LEVEL;
impl _WDF_SYNCHRONIZATION_SCOPE {
    pub const WdfSynchronizationScopeInvalid: _WDF_SYNCHRONIZATION_SCOPE = _WDF_SYNCHRONIZATION_SCOPE(
        0,
    );
}
impl _WDF_SYNCHRONIZATION_SCOPE {
    pub const WdfSynchronizationScopeInheritFromParent: _WDF_SYNCHRONIZATION_SCOPE = _WDF_SYNCHRONIZATION_SCOPE(
        1,
    );
}
impl _WDF_SYNCHRONIZATION_SCOPE {
    pub const WdfSynchronizationScopeDevice: _WDF_SYNCHRONIZATION_SCOPE = _WDF_SYNCHRONIZATION_SCOPE(
        2,
    );
}
impl _WDF_SYNCHRONIZATION_SCOPE {
    pub const WdfSynchronizationScopeQueue: _WDF_SYNCHRONIZATION_SCOPE = _WDF_SYNCHRONIZATION_SCOPE(
        3,
    );
}
impl _WDF_SYNCHRONIZATION_SCOPE {
    pub const WdfSynchronizationScopeNone: _WDF_SYNCHRONIZATION_SCOPE = _WDF_SYNCHRONIZATION_SCOPE(
        4,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDF_SYNCHRONIZATION_SCOPE(pub ::libc::c_int);
pub use self::_WDF_SYNCHRONIZATION_SCOPE as WDF_SYNCHRONIZATION_SCOPE;
pub type EVT_WDF_OBJECT_CONTEXT_CLEANUP = ::core::option::Option<
    unsafe extern "C" fn(Object: WDFOBJECT),
>;
pub type PFN_WDF_OBJECT_CONTEXT_CLEANUP = EVT_WDF_OBJECT_CONTEXT_CLEANUP;
pub type EVT_WDF_OBJECT_CONTEXT_DESTROY = ::core::option::Option<
    unsafe extern "C" fn(Object: WDFOBJECT),
>;
pub type PFN_WDF_OBJECT_CONTEXT_DESTROY = EVT_WDF_OBJECT_CONTEXT_DESTROY;
pub type PCWDF_OBJECT_CONTEXT_TYPE_INFO = *const _WDF_OBJECT_CONTEXT_TYPE_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WDF_OBJECT_ATTRIBUTES {
    pub Size: ULONG,
    pub EvtCleanupCallback: PFN_WDF_OBJECT_CONTEXT_CLEANUP,
    pub EvtDestroyCallback: PFN_WDF_OBJECT_CONTEXT_DESTROY,
    pub ExecutionLevel: WDF_EXECUTION_LEVEL,
    pub SynchronizationScope: WDF_SYNCHRONIZATION_SCOPE,
    pub ParentObject: WDFOBJECT,
    pub ContextSizeOverride: usize,
    pub ContextTypeInfo: PCWDF_OBJECT_CONTEXT_TYPE_INFO,
}
pub type WDF_OBJECT_ATTRIBUTES = _WDF_OBJECT_ATTRIBUTES;
pub type PFN_GET_UNIQUE_CONTEXT_TYPE = ::core::option::Option<
    unsafe extern "C" fn() -> PCWDF_OBJECT_CONTEXT_TYPE_INFO,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WDF_OBJECT_CONTEXT_TYPE_INFO {
    pub Size: ULONG,
    pub ContextName: LPCSTR,
    pub ContextSize: usize,
    pub UniqueType: PCWDF_OBJECT_CONTEXT_TYPE_INFO,
    pub EvtDriverGetUniqueContextType: PFN_GET_UNIQUE_CONTEXT_TYPE,
}
pub type WDF_OBJECT_CONTEXT_TYPE_INFO = _WDF_OBJECT_CONTEXT_TYPE_INFO;
pub type PFN_WDFOBJECTGETTYPEDCONTEXTWORKER = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Handle: WDFOBJECT,
        TypeInfo: PCWDF_OBJECT_CONTEXT_TYPE_INFO,
    ) -> PVOID,
>;
pub type PFN_WDFOBJECTREFERENCEACTUAL = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Handle: WDFOBJECT,
        Tag: PVOID,
        Line: LONG,
        File: PCHAR,
    ),
>;
pub type PFN_WDFOBJECTDEREFERENCEACTUAL = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Handle: WDFOBJECT,
        Tag: PVOID,
        Line: LONG,
        File: PCHAR,
    ),
>;
impl _WDF_DRIVER_INIT_FLAGS {
    pub const WdfDriverInitNonPnpDriver: _WDF_DRIVER_INIT_FLAGS = _WDF_DRIVER_INIT_FLAGS(
        1,
    );
}
impl _WDF_DRIVER_INIT_FLAGS {
    pub const WdfDriverInitNoDispatchOverride: _WDF_DRIVER_INIT_FLAGS = _WDF_DRIVER_INIT_FLAGS(
        2,
    );
}
impl _WDF_DRIVER_INIT_FLAGS {
    pub const WdfVerifyOn: _WDF_DRIVER_INIT_FLAGS = _WDF_DRIVER_INIT_FLAGS(4);
}
impl _WDF_DRIVER_INIT_FLAGS {
    pub const WdfVerifierOn: _WDF_DRIVER_INIT_FLAGS = _WDF_DRIVER_INIT_FLAGS(8);
}
impl ::core::ops::BitOr<_WDF_DRIVER_INIT_FLAGS> for _WDF_DRIVER_INIT_FLAGS {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        _WDF_DRIVER_INIT_FLAGS(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for _WDF_DRIVER_INIT_FLAGS {
    #[inline]
    fn bitor_assign(&mut self, rhs: _WDF_DRIVER_INIT_FLAGS) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<_WDF_DRIVER_INIT_FLAGS> for _WDF_DRIVER_INIT_FLAGS {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        _WDF_DRIVER_INIT_FLAGS(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for _WDF_DRIVER_INIT_FLAGS {
    #[inline]
    fn bitand_assign(&mut self, rhs: _WDF_DRIVER_INIT_FLAGS) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDF_DRIVER_INIT_FLAGS(pub ::libc::c_int);
pub use self::_WDF_DRIVER_INIT_FLAGS as WDF_DRIVER_INIT_FLAGS;
pub type EVT_WDF_DRIVER_DEVICE_ADD = ::core::option::Option<
    unsafe extern "C" fn(Driver: WDFDRIVER, DeviceInit: PWDFDEVICE_INIT) -> NTSTATUS,
>;
pub type PFN_WDF_DRIVER_DEVICE_ADD = EVT_WDF_DRIVER_DEVICE_ADD;
pub type EVT_WDF_DRIVER_UNLOAD = ::core::option::Option<
    unsafe extern "C" fn(Driver: WDFDRIVER),
>;
pub type PFN_WDF_DRIVER_UNLOAD = EVT_WDF_DRIVER_UNLOAD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WDF_DRIVER_CONFIG {
    pub Size: ULONG,
    pub EvtDriverDeviceAdd: PFN_WDF_DRIVER_DEVICE_ADD,
    pub EvtDriverUnload: PFN_WDF_DRIVER_UNLOAD,
    pub DriverInitFlags: ULONG,
    pub DriverPoolTag: ULONG,
}
pub type WDF_DRIVER_CONFIG = _WDF_DRIVER_CONFIG;
pub type PWDF_DRIVER_CONFIG = *mut _WDF_DRIVER_CONFIG;
pub type PFN_WDFDRIVERCREATE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        DriverObject: PDRIVER_OBJECT,
        RegistryPath: PCUNICODE_STRING,
        DriverAttributes: PWDF_OBJECT_ATTRIBUTES,
        DriverConfig: PWDF_DRIVER_CONFIG,
        Driver: *mut WDFDRIVER,
    ) -> NTSTATUS,
>;
impl _WDF_DEVICE_IO_TYPE {
    pub const WdfDeviceIoUndefined: _WDF_DEVICE_IO_TYPE = _WDF_DEVICE_IO_TYPE(0);
}
impl _WDF_DEVICE_IO_TYPE {
    pub const WdfDeviceIoNeither: _WDF_DEVICE_IO_TYPE = _WDF_DEVICE_IO_TYPE(1);
}
impl _WDF_DEVICE_IO_TYPE {
    pub const WdfDeviceIoBuffered: _WDF_DEVICE_IO_TYPE = _WDF_DEVICE_IO_TYPE(2);
}
impl _WDF_DEVICE_IO_TYPE {
    pub const WdfDeviceIoDirect: _WDF_DEVICE_IO_TYPE = _WDF_DEVICE_IO_TYPE(3);
}
impl _WDF_DEVICE_IO_TYPE {
    pub const WdfDeviceIoBufferedOrDirect: _WDF_DEVICE_IO_TYPE = _WDF_DEVICE_IO_TYPE(4);
}
impl _WDF_DEVICE_IO_TYPE {
    pub const WdfDeviceIoMaximum: _WDF_DEVICE_IO_TYPE = _WDF_DEVICE_IO_TYPE(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDF_DEVICE_IO_TYPE(pub ::libc::c_int);
pub use self::_WDF_DEVICE_IO_TYPE as WDF_DEVICE_IO_TYPE;
impl _WDF_FILEOBJECT_CLASS {
    pub const WdfFileObjectInvalid: _WDF_FILEOBJECT_CLASS = _WDF_FILEOBJECT_CLASS(0);
}
impl _WDF_FILEOBJECT_CLASS {
    pub const WdfFileObjectNotRequired: _WDF_FILEOBJECT_CLASS = _WDF_FILEOBJECT_CLASS(1);
}
impl _WDF_FILEOBJECT_CLASS {
    pub const WdfFileObjectWdfCanUseFsContext: _WDF_FILEOBJECT_CLASS = _WDF_FILEOBJECT_CLASS(
        2,
    );
}
impl _WDF_FILEOBJECT_CLASS {
    pub const WdfFileObjectWdfCanUseFsContext2: _WDF_FILEOBJECT_CLASS = _WDF_FILEOBJECT_CLASS(
        3,
    );
}
impl _WDF_FILEOBJECT_CLASS {
    pub const WdfFileObjectWdfCannotUseFsContexts: _WDF_FILEOBJECT_CLASS = _WDF_FILEOBJECT_CLASS(
        4,
    );
}
impl _WDF_FILEOBJECT_CLASS {
    pub const WdfFileObjectCanBeOptional: _WDF_FILEOBJECT_CLASS = _WDF_FILEOBJECT_CLASS(
        -2147483648,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDF_FILEOBJECT_CLASS(pub ::libc::c_int);
pub use self::_WDF_FILEOBJECT_CLASS as WDF_FILEOBJECT_CLASS;
extern "C" {
    pub static SDDL_DEVOBJ_SYS_ALL_ADM_RWX_WORLD_RW_RES_R: UNICODE_STRING;
}
pub type EVT_WDF_DEVICE_FILE_CREATE = ::core::option::Option<
    unsafe extern "C" fn(
        Device: WDFDEVICE,
        Request: WDFREQUEST,
        FileObject: WDFFILEOBJECT,
    ),
>;
pub type PFN_WDF_DEVICE_FILE_CREATE = EVT_WDF_DEVICE_FILE_CREATE;
pub type EVT_WDF_FILE_CLOSE = ::core::option::Option<
    unsafe extern "C" fn(FileObject: WDFFILEOBJECT),
>;
pub type PFN_WDF_FILE_CLOSE = EVT_WDF_FILE_CLOSE;
pub type EVT_WDF_FILE_CLEANUP = ::core::option::Option<
    unsafe extern "C" fn(FileObject: WDFFILEOBJECT),
>;
pub type PFN_WDF_FILE_CLEANUP = EVT_WDF_FILE_CLEANUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WDF_FILEOBJECT_CONFIG {
    pub Size: ULONG,
    pub EvtDeviceFileCreate: PFN_WDF_DEVICE_FILE_CREATE,
    pub EvtFileClose: PFN_WDF_FILE_CLOSE,
    pub EvtFileCleanup: PFN_WDF_FILE_CLEANUP,
    pub AutoForwardCleanupClose: WDF_TRI_STATE,
    pub FileObjectClass: WDF_FILEOBJECT_CLASS,
}
pub type WDF_FILEOBJECT_CONFIG = _WDF_FILEOBJECT_CONFIG;
pub type PWDF_FILEOBJECT_CONFIG = *mut _WDF_FILEOBJECT_CONFIG;
pub type PFN_WDFDEVICEINITFREE = ::core::option::Option<
    unsafe extern "C" fn(DriverGlobals: PWDF_DRIVER_GLOBALS, DeviceInit: PWDFDEVICE_INIT),
>;
pub type PFN_WDFDEVICEINITSETEXCLUSIVE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        DeviceInit: PWDFDEVICE_INIT,
        IsExclusive: BOOLEAN,
    ),
>;
pub type PFN_WDFDEVICEINITSETIOTYPE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        DeviceInit: PWDFDEVICE_INIT,
        IoType: WDF_DEVICE_IO_TYPE,
    ),
>;
pub type PFN_WDFDEVICEINITASSIGNNAME = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        DeviceInit: PWDFDEVICE_INIT,
        DeviceName: PCUNICODE_STRING,
    ) -> NTSTATUS,
>;
pub type PFN_WDFDEVICEINITSETFILEOBJECTCONFIG = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        DeviceInit: PWDFDEVICE_INIT,
        FileObjectConfig: PWDF_FILEOBJECT_CONFIG,
        FileObjectAttributes: PWDF_OBJECT_ATTRIBUTES,
    ),
>;
pub type PFN_WDFDEVICECREATE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        DeviceInit: *mut PWDFDEVICE_INIT,
        DeviceAttributes: PWDF_OBJECT_ATTRIBUTES,
        Device: *mut WDFDEVICE,
    ) -> NTSTATUS,
>;
pub type PFN_WDFDEVICECREATESYMBOLICLINK = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Device: WDFDEVICE,
        SymbolicLinkName: PCUNICODE_STRING,
    ) -> NTSTATUS,
>;
pub type PFN_WDFREQUESTCOMPLETE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Request: WDFREQUEST,
        Status: NTSTATUS,
    ),
>;
pub type PFN_WDFREQUESTRETRIEVEINPUTBUFFER = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Request: WDFREQUEST,
        MinimumRequiredLength: usize,
        Buffer: *mut PVOID,
        Length: *mut usize,
    ) -> NTSTATUS,
>;
pub type PFN_WDFREQUESTRETRIEVEOUTPUTBUFFER = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Request: WDFREQUEST,
        MinimumRequiredSize: usize,
        Buffer: *mut PVOID,
        Length: *mut usize,
    ) -> NTSTATUS,
>;
pub type PFN_WDFREQUESTSETINFORMATION = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Request: WDFREQUEST,
        Information: ULONG_PTR,
    ),
>;
pub type PFN_WDFREQUESTGETREQUESTORMODE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Request: WDFREQUEST,
    ) -> KPROCESSOR_MODE,
>;
impl _WDF_IO_QUEUE_DISPATCH_TYPE {
    pub const WdfIoQueueDispatchInvalid: _WDF_IO_QUEUE_DISPATCH_TYPE = _WDF_IO_QUEUE_DISPATCH_TYPE(
        0,
    );
}
impl _WDF_IO_QUEUE_DISPATCH_TYPE {
    pub const WdfIoQueueDispatchSequential: _WDF_IO_QUEUE_DISPATCH_TYPE = _WDF_IO_QUEUE_DISPATCH_TYPE(
        1,
    );
}
impl _WDF_IO_QUEUE_DISPATCH_TYPE {
    pub const WdfIoQueueDispatchParallel: _WDF_IO_QUEUE_DISPATCH_TYPE = _WDF_IO_QUEUE_DISPATCH_TYPE(
        2,
    );
}
impl _WDF_IO_QUEUE_DISPATCH_TYPE {
    pub const WdfIoQueueDispatchManual: _WDF_IO_QUEUE_DISPATCH_TYPE = _WDF_IO_QUEUE_DISPATCH_TYPE(
        3,
    );
}
impl _WDF_IO_QUEUE_DISPATCH_TYPE {
    pub const WdfIoQueueDispatchMax: _WDF_IO_QUEUE_DISPATCH_TYPE = _WDF_IO_QUEUE_DISPATCH_TYPE(
        4,
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _WDF_IO_QUEUE_DISPATCH_TYPE(pub ::libc::c_int);
pub use self::_WDF_IO_QUEUE_DISPATCH_TYPE as WDF_IO_QUEUE_DISPATCH_TYPE;
pub type EVT_WDF_IO_QUEUE_IO_DEFAULT = ::core::option::Option<
    unsafe extern "C" fn(Queue: WDFQUEUE, Request: WDFREQUEST),
>;
pub type PFN_WDF_IO_QUEUE_IO_DEFAULT = EVT_WDF_IO_QUEUE_IO_DEFAULT;
pub type EVT_WDF_IO_QUEUE_IO_STOP = ::core::option::Option<
    unsafe extern "C" fn(Queue: WDFQUEUE, Request: WDFREQUEST, ActionFlags: ULONG),
>;
pub type PFN_WDF_IO_QUEUE_IO_STOP = EVT_WDF_IO_QUEUE_IO_STOP;
pub type EVT_WDF_IO_QUEUE_IO_RESUME = ::core::option::Option<
    unsafe extern "C" fn(Queue: WDFQUEUE, Request: WDFREQUEST),
>;
pub type PFN_WDF_IO_QUEUE_IO_RESUME = EVT_WDF_IO_QUEUE_IO_RESUME;
pub type EVT_WDF_IO_QUEUE_IO_READ = ::core::option::Option<
    unsafe extern "C" fn(Queue: WDFQUEUE, Request: WDFREQUEST, Length: usize),
>;
pub type PFN_WDF_IO_QUEUE_IO_READ = EVT_WDF_IO_QUEUE_IO_READ;
pub type EVT_WDF_IO_QUEUE_IO_WRITE = ::core::option::Option<
    unsafe extern "C" fn(Queue: WDFQUEUE, Request: WDFREQUEST, Length: usize),
>;
pub type PFN_WDF_IO_QUEUE_IO_WRITE = EVT_WDF_IO_QUEUE_IO_WRITE;
pub type EVT_WDF_IO_QUEUE_IO_DEVICE_CONTROL = ::core::option::Option<
    unsafe extern "C" fn(
        Queue: WDFQUEUE,
        Request: WDFREQUEST,
        OutputBufferLength: usize,
        InputBufferLength: usize,
        IoControlCode: ULONG,
    ),
>;
pub type PFN_WDF_IO_QUEUE_IO_DEVICE_CONTROL = EVT_WDF_IO_QUEUE_IO_DEVICE_CONTROL;
pub type EVT_WDF_IO_QUEUE_IO_INTERNAL_DEVICE_CONTROL = ::core::option::Option<
    unsafe extern "C" fn(
        Queue: WDFQUEUE,
        Request: WDFREQUEST,
        OutputBufferLength: usize,
        InputBufferLength: usize,
        IoControlCode: ULONG,
    ),
>;
pub type PFN_WDF_IO_QUEUE_IO_INTERNAL_DEVICE_CONTROL = EVT_WDF_IO_QUEUE_IO_INTERNAL_DEVICE_CONTROL;
pub type EVT_WDF_IO_QUEUE_IO_CANCELED_ON_QUEUE = ::core::option::Option<
    unsafe extern "C" fn(Queue: WDFQUEUE, Request: WDFREQUEST),
>;
pub type PFN_WDF_IO_QUEUE_IO_CANCELED_ON_QUEUE = EVT_WDF_IO_QUEUE_IO_CANCELED_ON_QUEUE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WDF_IO_QUEUE_CONFIG {
    pub Size: ULONG,
    pub DispatchType: WDF_IO_QUEUE_DISPATCH_TYPE,
    pub PowerManaged: WDF_TRI_STATE,
    pub AllowZeroLengthRequests: BOOLEAN,
    pub DefaultQueue: BOOLEAN,
    pub EvtIoDefault: PFN_WDF_IO_QUEUE_IO_DEFAULT,
    pub EvtIoRead: PFN_WDF_IO_QUEUE_IO_READ,
    pub EvtIoWrite: PFN_WDF_IO_QUEUE_IO_WRITE,
    pub EvtIoDeviceControl: PFN_WDF_IO_QUEUE_IO_DEVICE_CONTROL,
    pub EvtIoInternalDeviceControl: PFN_WDF_IO_QUEUE_IO_INTERNAL_DEVICE_CONTROL,
    pub EvtIoStop: PFN_WDF_IO_QUEUE_IO_STOP,
    pub EvtIoResume: PFN_WDF_IO_QUEUE_IO_RESUME,
    pub EvtIoCanceledOnQueue: PFN_WDF_IO_QUEUE_IO_CANCELED_ON_QUEUE,
    pub Settings: _WDF_IO_QUEUE_CONFIG__bindgen_ty_1,
    pub Driver: WDFDRIVER,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _WDF_IO_QUEUE_CONFIG__bindgen_ty_1 {
    pub Parallel: _WDF_IO_QUEUE_CONFIG__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WDF_IO_QUEUE_CONFIG__bindgen_ty_1__bindgen_ty_1 {
    pub NumberOfPresentedRequests: ULONG,
}
pub type WDF_IO_QUEUE_CONFIG = _WDF_IO_QUEUE_CONFIG;
pub type PWDF_IO_QUEUE_CONFIG = *mut _WDF_IO_QUEUE_CONFIG;
pub type PFN_WDFIOQUEUECREATE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Device: WDFDEVICE,
        Config: PWDF_IO_QUEUE_CONFIG,
        QueueAttributes: PWDF_OBJECT_ATTRIBUTES,
        Queue: *mut WDFQUEUE,
    ) -> NTSTATUS,
>;
pub type PFN_WDFIOQUEUEGETDEVICE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Queue: WDFQUEUE,
    ) -> WDFDEVICE,
>;
pub type PFN_WDFCONTROLDEVICEINITALLOCATE = ::core::option::Option<
    unsafe extern "C" fn(
        DriverGlobals: PWDF_DRIVER_GLOBALS,
        Driver: WDFDRIVER,
        SDDLString: *const UNICODE_STRING,
    ) -> PWDFDEVICE_INIT,
>;
pub type PFN_WDFCONTROLFINISHINITIALIZING = ::core::option::Option<
    unsafe extern "C" fn(DriverGlobals: PWDF_DRIVER_GLOBALS, Device: WDFDEVICE),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EPROCESS {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOP_FILE_OBJECT_EXTENSION {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IORING_OBJECT {
    pub _address: u8,
}
